
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005520  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001448  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08006a28  08006a28  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a28  08006a28  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000064  08006a94  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006a94  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101d8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f9  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3e  00000000  00000000  00033638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a966  00000000  00000000  00034276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013168  00000000  00000000  0004ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b0c5  00000000  00000000  00061d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e3c  00000000  00000000  000fce0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00100c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055c8 	.word	0x080055c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080055c8 	.word	0x080055c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2uiz>:
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	b510      	push	{r4, lr}
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	f000 fa02 	bl	8000644 <__aeabi_fcmpge>
 8000240:	2800      	cmp	r0, #0
 8000242:	d103      	bne.n	800024c <__aeabi_f2uiz+0x18>
 8000244:	1c20      	adds	r0, r4, #0
 8000246:	f000 f9ad 	bl	80005a4 <__aeabi_f2iz>
 800024a:	bd10      	pop	{r4, pc}
 800024c:	219e      	movs	r1, #158	; 0x9e
 800024e:	1c20      	adds	r0, r4, #0
 8000250:	05c9      	lsls	r1, r1, #23
 8000252:	f000 f807 	bl	8000264 <__aeabi_fsub>
 8000256:	f000 f9a5 	bl	80005a4 <__aeabi_f2iz>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	469c      	mov	ip, r3
 8000260:	4460      	add	r0, ip
 8000262:	e7f2      	b.n	800024a <__aeabi_f2uiz+0x16>

08000264 <__aeabi_fsub>:
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	46c6      	mov	lr, r8
 8000268:	0243      	lsls	r3, r0, #9
 800026a:	0a5b      	lsrs	r3, r3, #9
 800026c:	0045      	lsls	r5, r0, #1
 800026e:	00da      	lsls	r2, r3, #3
 8000270:	0fc4      	lsrs	r4, r0, #31
 8000272:	0248      	lsls	r0, r1, #9
 8000274:	004f      	lsls	r7, r1, #1
 8000276:	4694      	mov	ip, r2
 8000278:	0a42      	lsrs	r2, r0, #9
 800027a:	001e      	movs	r6, r3
 800027c:	4690      	mov	r8, r2
 800027e:	b500      	push	{lr}
 8000280:	0e2d      	lsrs	r5, r5, #24
 8000282:	0e3f      	lsrs	r7, r7, #24
 8000284:	0fc9      	lsrs	r1, r1, #31
 8000286:	0980      	lsrs	r0, r0, #6
 8000288:	2fff      	cmp	r7, #255	; 0xff
 800028a:	d059      	beq.n	8000340 <__aeabi_fsub+0xdc>
 800028c:	2201      	movs	r2, #1
 800028e:	4051      	eors	r1, r2
 8000290:	428c      	cmp	r4, r1
 8000292:	d039      	beq.n	8000308 <__aeabi_fsub+0xa4>
 8000294:	1bea      	subs	r2, r5, r7
 8000296:	2a00      	cmp	r2, #0
 8000298:	dd58      	ble.n	800034c <__aeabi_fsub+0xe8>
 800029a:	2f00      	cmp	r7, #0
 800029c:	d068      	beq.n	8000370 <__aeabi_fsub+0x10c>
 800029e:	2dff      	cmp	r5, #255	; 0xff
 80002a0:	d100      	bne.n	80002a4 <__aeabi_fsub+0x40>
 80002a2:	e0d1      	b.n	8000448 <__aeabi_fsub+0x1e4>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	04db      	lsls	r3, r3, #19
 80002a8:	4318      	orrs	r0, r3
 80002aa:	2a1b      	cmp	r2, #27
 80002ac:	dc00      	bgt.n	80002b0 <__aeabi_fsub+0x4c>
 80002ae:	e0e3      	b.n	8000478 <__aeabi_fsub+0x214>
 80002b0:	2301      	movs	r3, #1
 80002b2:	4662      	mov	r2, ip
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	015a      	lsls	r2, r3, #5
 80002b8:	d400      	bmi.n	80002bc <__aeabi_fsub+0x58>
 80002ba:	e0ac      	b.n	8000416 <__aeabi_fsub+0x1b2>
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	099e      	lsrs	r6, r3, #6
 80002c0:	0030      	movs	r0, r6
 80002c2:	f000 f9c9 	bl	8000658 <__clzsi2>
 80002c6:	0033      	movs	r3, r6
 80002c8:	3805      	subs	r0, #5
 80002ca:	4083      	lsls	r3, r0
 80002cc:	4285      	cmp	r5, r0
 80002ce:	dc00      	bgt.n	80002d2 <__aeabi_fsub+0x6e>
 80002d0:	e0c6      	b.n	8000460 <__aeabi_fsub+0x1fc>
 80002d2:	4ab2      	ldr	r2, [pc, #712]	; (800059c <__aeabi_fsub+0x338>)
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	4013      	ands	r3, r2
 80002d8:	075a      	lsls	r2, r3, #29
 80002da:	d004      	beq.n	80002e6 <__aeabi_fsub+0x82>
 80002dc:	220f      	movs	r2, #15
 80002de:	401a      	ands	r2, r3
 80002e0:	2a04      	cmp	r2, #4
 80002e2:	d000      	beq.n	80002e6 <__aeabi_fsub+0x82>
 80002e4:	3304      	adds	r3, #4
 80002e6:	015a      	lsls	r2, r3, #5
 80002e8:	d400      	bmi.n	80002ec <__aeabi_fsub+0x88>
 80002ea:	e097      	b.n	800041c <__aeabi_fsub+0x1b8>
 80002ec:	1c6a      	adds	r2, r5, #1
 80002ee:	2dfe      	cmp	r5, #254	; 0xfe
 80002f0:	d100      	bne.n	80002f4 <__aeabi_fsub+0x90>
 80002f2:	e084      	b.n	80003fe <__aeabi_fsub+0x19a>
 80002f4:	019b      	lsls	r3, r3, #6
 80002f6:	0a5e      	lsrs	r6, r3, #9
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	05d0      	lsls	r0, r2, #23
 80002fc:	4330      	orrs	r0, r6
 80002fe:	07e4      	lsls	r4, r4, #31
 8000300:	4320      	orrs	r0, r4
 8000302:	bc80      	pop	{r7}
 8000304:	46b8      	mov	r8, r7
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000308:	1bea      	subs	r2, r5, r7
 800030a:	2a00      	cmp	r2, #0
 800030c:	dd41      	ble.n	8000392 <__aeabi_fsub+0x12e>
 800030e:	2f00      	cmp	r7, #0
 8000310:	d06b      	beq.n	80003ea <__aeabi_fsub+0x186>
 8000312:	2dff      	cmp	r5, #255	; 0xff
 8000314:	d100      	bne.n	8000318 <__aeabi_fsub+0xb4>
 8000316:	e097      	b.n	8000448 <__aeabi_fsub+0x1e4>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	04db      	lsls	r3, r3, #19
 800031c:	4318      	orrs	r0, r3
 800031e:	2a1b      	cmp	r2, #27
 8000320:	dc00      	bgt.n	8000324 <__aeabi_fsub+0xc0>
 8000322:	e0cc      	b.n	80004be <__aeabi_fsub+0x25a>
 8000324:	2301      	movs	r3, #1
 8000326:	4463      	add	r3, ip
 8000328:	015a      	lsls	r2, r3, #5
 800032a:	d574      	bpl.n	8000416 <__aeabi_fsub+0x1b2>
 800032c:	3501      	adds	r5, #1
 800032e:	2dff      	cmp	r5, #255	; 0xff
 8000330:	d065      	beq.n	80003fe <__aeabi_fsub+0x19a>
 8000332:	2201      	movs	r2, #1
 8000334:	499a      	ldr	r1, [pc, #616]	; (80005a0 <__aeabi_fsub+0x33c>)
 8000336:	401a      	ands	r2, r3
 8000338:	085b      	lsrs	r3, r3, #1
 800033a:	400b      	ands	r3, r1
 800033c:	4313      	orrs	r3, r2
 800033e:	e7cb      	b.n	80002d8 <__aeabi_fsub+0x74>
 8000340:	2800      	cmp	r0, #0
 8000342:	d01f      	beq.n	8000384 <__aeabi_fsub+0x120>
 8000344:	428c      	cmp	r4, r1
 8000346:	d022      	beq.n	800038e <__aeabi_fsub+0x12a>
 8000348:	002a      	movs	r2, r5
 800034a:	3aff      	subs	r2, #255	; 0xff
 800034c:	2a00      	cmp	r2, #0
 800034e:	d035      	beq.n	80003bc <__aeabi_fsub+0x158>
 8000350:	1b7a      	subs	r2, r7, r5
 8000352:	2d00      	cmp	r5, #0
 8000354:	d000      	beq.n	8000358 <__aeabi_fsub+0xf4>
 8000356:	e099      	b.n	800048c <__aeabi_fsub+0x228>
 8000358:	4663      	mov	r3, ip
 800035a:	2b00      	cmp	r3, #0
 800035c:	d100      	bne.n	8000360 <__aeabi_fsub+0xfc>
 800035e:	e0dd      	b.n	800051c <__aeabi_fsub+0x2b8>
 8000360:	1e53      	subs	r3, r2, #1
 8000362:	2a01      	cmp	r2, #1
 8000364:	d100      	bne.n	8000368 <__aeabi_fsub+0x104>
 8000366:	e105      	b.n	8000574 <__aeabi_fsub+0x310>
 8000368:	2aff      	cmp	r2, #255	; 0xff
 800036a:	d06b      	beq.n	8000444 <__aeabi_fsub+0x1e0>
 800036c:	001a      	movs	r2, r3
 800036e:	e094      	b.n	800049a <__aeabi_fsub+0x236>
 8000370:	2800      	cmp	r0, #0
 8000372:	d073      	beq.n	800045c <__aeabi_fsub+0x1f8>
 8000374:	1e51      	subs	r1, r2, #1
 8000376:	2a01      	cmp	r2, #1
 8000378:	d100      	bne.n	800037c <__aeabi_fsub+0x118>
 800037a:	e0df      	b.n	800053c <__aeabi_fsub+0x2d8>
 800037c:	2aff      	cmp	r2, #255	; 0xff
 800037e:	d063      	beq.n	8000448 <__aeabi_fsub+0x1e4>
 8000380:	000a      	movs	r2, r1
 8000382:	e792      	b.n	80002aa <__aeabi_fsub+0x46>
 8000384:	2201      	movs	r2, #1
 8000386:	4051      	eors	r1, r2
 8000388:	42a1      	cmp	r1, r4
 800038a:	d000      	beq.n	800038e <__aeabi_fsub+0x12a>
 800038c:	e782      	b.n	8000294 <__aeabi_fsub+0x30>
 800038e:	002a      	movs	r2, r5
 8000390:	3aff      	subs	r2, #255	; 0xff
 8000392:	2a00      	cmp	r2, #0
 8000394:	d036      	beq.n	8000404 <__aeabi_fsub+0x1a0>
 8000396:	1b7a      	subs	r2, r7, r5
 8000398:	2d00      	cmp	r5, #0
 800039a:	d100      	bne.n	800039e <__aeabi_fsub+0x13a>
 800039c:	e0aa      	b.n	80004f4 <__aeabi_fsub+0x290>
 800039e:	2fff      	cmp	r7, #255	; 0xff
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fsub+0x140>
 80003a2:	e0da      	b.n	800055a <__aeabi_fsub+0x2f6>
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	4661      	mov	r1, ip
 80003a8:	04db      	lsls	r3, r3, #19
 80003aa:	4319      	orrs	r1, r3
 80003ac:	468c      	mov	ip, r1
 80003ae:	2a1b      	cmp	r2, #27
 80003b0:	dc00      	bgt.n	80003b4 <__aeabi_fsub+0x150>
 80003b2:	e0d4      	b.n	800055e <__aeabi_fsub+0x2fa>
 80003b4:	2301      	movs	r3, #1
 80003b6:	003d      	movs	r5, r7
 80003b8:	181b      	adds	r3, r3, r0
 80003ba:	e7b5      	b.n	8000328 <__aeabi_fsub+0xc4>
 80003bc:	27fe      	movs	r7, #254	; 0xfe
 80003be:	1c6a      	adds	r2, r5, #1
 80003c0:	4217      	tst	r7, r2
 80003c2:	d171      	bne.n	80004a8 <__aeabi_fsub+0x244>
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d000      	beq.n	80003ca <__aeabi_fsub+0x166>
 80003c8:	e09e      	b.n	8000508 <__aeabi_fsub+0x2a4>
 80003ca:	4663      	mov	r3, ip
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fsub+0x16e>
 80003d0:	e0d5      	b.n	800057e <__aeabi_fsub+0x31a>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d100      	bne.n	80003da <__aeabi_fsub+0x176>
 80003d8:	e78f      	b.n	80002fa <__aeabi_fsub+0x96>
 80003da:	1a1b      	subs	r3, r3, r0
 80003dc:	015e      	lsls	r6, r3, #5
 80003de:	d400      	bmi.n	80003e2 <__aeabi_fsub+0x17e>
 80003e0:	e0d6      	b.n	8000590 <__aeabi_fsub+0x32c>
 80003e2:	4663      	mov	r3, ip
 80003e4:	000c      	movs	r4, r1
 80003e6:	1ac3      	subs	r3, r0, r3
 80003e8:	e776      	b.n	80002d8 <__aeabi_fsub+0x74>
 80003ea:	2800      	cmp	r0, #0
 80003ec:	d036      	beq.n	800045c <__aeabi_fsub+0x1f8>
 80003ee:	1e51      	subs	r1, r2, #1
 80003f0:	2a01      	cmp	r2, #1
 80003f2:	d100      	bne.n	80003f6 <__aeabi_fsub+0x192>
 80003f4:	e09a      	b.n	800052c <__aeabi_fsub+0x2c8>
 80003f6:	2aff      	cmp	r2, #255	; 0xff
 80003f8:	d026      	beq.n	8000448 <__aeabi_fsub+0x1e4>
 80003fa:	000a      	movs	r2, r1
 80003fc:	e78f      	b.n	800031e <__aeabi_fsub+0xba>
 80003fe:	22ff      	movs	r2, #255	; 0xff
 8000400:	2600      	movs	r6, #0
 8000402:	e77a      	b.n	80002fa <__aeabi_fsub+0x96>
 8000404:	27fe      	movs	r7, #254	; 0xfe
 8000406:	1c6a      	adds	r2, r5, #1
 8000408:	4217      	tst	r7, r2
 800040a:	d062      	beq.n	80004d2 <__aeabi_fsub+0x26e>
 800040c:	2aff      	cmp	r2, #255	; 0xff
 800040e:	d0f6      	beq.n	80003fe <__aeabi_fsub+0x19a>
 8000410:	0015      	movs	r5, r2
 8000412:	4460      	add	r0, ip
 8000414:	0843      	lsrs	r3, r0, #1
 8000416:	075a      	lsls	r2, r3, #29
 8000418:	d000      	beq.n	800041c <__aeabi_fsub+0x1b8>
 800041a:	e75f      	b.n	80002dc <__aeabi_fsub+0x78>
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	2dff      	cmp	r5, #255	; 0xff
 8000420:	d012      	beq.n	8000448 <__aeabi_fsub+0x1e4>
 8000422:	025b      	lsls	r3, r3, #9
 8000424:	0a5e      	lsrs	r6, r3, #9
 8000426:	b2ea      	uxtb	r2, r5
 8000428:	e767      	b.n	80002fa <__aeabi_fsub+0x96>
 800042a:	4662      	mov	r2, ip
 800042c:	2a00      	cmp	r2, #0
 800042e:	d100      	bne.n	8000432 <__aeabi_fsub+0x1ce>
 8000430:	e093      	b.n	800055a <__aeabi_fsub+0x2f6>
 8000432:	2800      	cmp	r0, #0
 8000434:	d008      	beq.n	8000448 <__aeabi_fsub+0x1e4>
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	03d2      	lsls	r2, r2, #15
 800043a:	4213      	tst	r3, r2
 800043c:	d004      	beq.n	8000448 <__aeabi_fsub+0x1e4>
 800043e:	4640      	mov	r0, r8
 8000440:	4210      	tst	r0, r2
 8000442:	d101      	bne.n	8000448 <__aeabi_fsub+0x1e4>
 8000444:	000c      	movs	r4, r1
 8000446:	4643      	mov	r3, r8
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0d8      	beq.n	80003fe <__aeabi_fsub+0x19a>
 800044c:	2680      	movs	r6, #128	; 0x80
 800044e:	03f6      	lsls	r6, r6, #15
 8000450:	431e      	orrs	r6, r3
 8000452:	0276      	lsls	r6, r6, #9
 8000454:	22ff      	movs	r2, #255	; 0xff
 8000456:	0a76      	lsrs	r6, r6, #9
 8000458:	e74f      	b.n	80002fa <__aeabi_fsub+0x96>
 800045a:	4643      	mov	r3, r8
 800045c:	0015      	movs	r5, r2
 800045e:	e7de      	b.n	800041e <__aeabi_fsub+0x1ba>
 8000460:	2220      	movs	r2, #32
 8000462:	1b40      	subs	r0, r0, r5
 8000464:	3001      	adds	r0, #1
 8000466:	1a12      	subs	r2, r2, r0
 8000468:	0019      	movs	r1, r3
 800046a:	4093      	lsls	r3, r2
 800046c:	40c1      	lsrs	r1, r0
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	4193      	sbcs	r3, r2
 8000472:	2500      	movs	r5, #0
 8000474:	430b      	orrs	r3, r1
 8000476:	e72f      	b.n	80002d8 <__aeabi_fsub+0x74>
 8000478:	2320      	movs	r3, #32
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	0001      	movs	r1, r0
 800047e:	4098      	lsls	r0, r3
 8000480:	0003      	movs	r3, r0
 8000482:	40d1      	lsrs	r1, r2
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	4193      	sbcs	r3, r2
 8000488:	430b      	orrs	r3, r1
 800048a:	e712      	b.n	80002b2 <__aeabi_fsub+0x4e>
 800048c:	2fff      	cmp	r7, #255	; 0xff
 800048e:	d0d9      	beq.n	8000444 <__aeabi_fsub+0x1e0>
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	4664      	mov	r4, ip
 8000494:	04db      	lsls	r3, r3, #19
 8000496:	431c      	orrs	r4, r3
 8000498:	46a4      	mov	ip, r4
 800049a:	2a1b      	cmp	r2, #27
 800049c:	dd52      	ble.n	8000544 <__aeabi_fsub+0x2e0>
 800049e:	2301      	movs	r3, #1
 80004a0:	000c      	movs	r4, r1
 80004a2:	003d      	movs	r5, r7
 80004a4:	1ac3      	subs	r3, r0, r3
 80004a6:	e706      	b.n	80002b6 <__aeabi_fsub+0x52>
 80004a8:	4663      	mov	r3, ip
 80004aa:	1a1e      	subs	r6, r3, r0
 80004ac:	0173      	lsls	r3, r6, #5
 80004ae:	d439      	bmi.n	8000524 <__aeabi_fsub+0x2c0>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d000      	beq.n	80004b6 <__aeabi_fsub+0x252>
 80004b4:	e704      	b.n	80002c0 <__aeabi_fsub+0x5c>
 80004b6:	2400      	movs	r4, #0
 80004b8:	2200      	movs	r2, #0
 80004ba:	2600      	movs	r6, #0
 80004bc:	e71d      	b.n	80002fa <__aeabi_fsub+0x96>
 80004be:	2320      	movs	r3, #32
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	0001      	movs	r1, r0
 80004c4:	4098      	lsls	r0, r3
 80004c6:	0003      	movs	r3, r0
 80004c8:	40d1      	lsrs	r1, r2
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	430b      	orrs	r3, r1
 80004d0:	e729      	b.n	8000326 <__aeabi_fsub+0xc2>
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	d1a9      	bne.n	800042a <__aeabi_fsub+0x1c6>
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d056      	beq.n	800058a <__aeabi_fsub+0x326>
 80004dc:	2200      	movs	r2, #0
 80004de:	2800      	cmp	r0, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fsub+0x280>
 80004e2:	e70a      	b.n	80002fa <__aeabi_fsub+0x96>
 80004e4:	0003      	movs	r3, r0
 80004e6:	4463      	add	r3, ip
 80004e8:	015a      	lsls	r2, r3, #5
 80004ea:	d594      	bpl.n	8000416 <__aeabi_fsub+0x1b2>
 80004ec:	4a2b      	ldr	r2, [pc, #172]	; (800059c <__aeabi_fsub+0x338>)
 80004ee:	3501      	adds	r5, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	e790      	b.n	8000416 <__aeabi_fsub+0x1b2>
 80004f4:	4663      	mov	r3, ip
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0af      	beq.n	800045a <__aeabi_fsub+0x1f6>
 80004fa:	1e53      	subs	r3, r2, #1
 80004fc:	2a01      	cmp	r2, #1
 80004fe:	d015      	beq.n	800052c <__aeabi_fsub+0x2c8>
 8000500:	2aff      	cmp	r2, #255	; 0xff
 8000502:	d02a      	beq.n	800055a <__aeabi_fsub+0x2f6>
 8000504:	001a      	movs	r2, r3
 8000506:	e752      	b.n	80003ae <__aeabi_fsub+0x14a>
 8000508:	4662      	mov	r2, ip
 800050a:	2a00      	cmp	r2, #0
 800050c:	d191      	bne.n	8000432 <__aeabi_fsub+0x1ce>
 800050e:	2800      	cmp	r0, #0
 8000510:	d198      	bne.n	8000444 <__aeabi_fsub+0x1e0>
 8000512:	2680      	movs	r6, #128	; 0x80
 8000514:	2400      	movs	r4, #0
 8000516:	22ff      	movs	r2, #255	; 0xff
 8000518:	03f6      	lsls	r6, r6, #15
 800051a:	e6ee      	b.n	80002fa <__aeabi_fsub+0x96>
 800051c:	000c      	movs	r4, r1
 800051e:	4643      	mov	r3, r8
 8000520:	0015      	movs	r5, r2
 8000522:	e77c      	b.n	800041e <__aeabi_fsub+0x1ba>
 8000524:	4663      	mov	r3, ip
 8000526:	000c      	movs	r4, r1
 8000528:	1ac6      	subs	r6, r0, r3
 800052a:	e6c9      	b.n	80002c0 <__aeabi_fsub+0x5c>
 800052c:	0003      	movs	r3, r0
 800052e:	4463      	add	r3, ip
 8000530:	2501      	movs	r5, #1
 8000532:	015a      	lsls	r2, r3, #5
 8000534:	d400      	bmi.n	8000538 <__aeabi_fsub+0x2d4>
 8000536:	e76e      	b.n	8000416 <__aeabi_fsub+0x1b2>
 8000538:	2502      	movs	r5, #2
 800053a:	e6fa      	b.n	8000332 <__aeabi_fsub+0xce>
 800053c:	4663      	mov	r3, ip
 800053e:	2501      	movs	r5, #1
 8000540:	1a1b      	subs	r3, r3, r0
 8000542:	e6b8      	b.n	80002b6 <__aeabi_fsub+0x52>
 8000544:	4664      	mov	r4, ip
 8000546:	2320      	movs	r3, #32
 8000548:	40d4      	lsrs	r4, r2
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4662      	mov	r2, ip
 800054e:	409a      	lsls	r2, r3
 8000550:	0013      	movs	r3, r2
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	4323      	orrs	r3, r4
 8000558:	e7a2      	b.n	80004a0 <__aeabi_fsub+0x23c>
 800055a:	4643      	mov	r3, r8
 800055c:	e774      	b.n	8000448 <__aeabi_fsub+0x1e4>
 800055e:	4661      	mov	r1, ip
 8000560:	2320      	movs	r3, #32
 8000562:	40d1      	lsrs	r1, r2
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	4662      	mov	r2, ip
 8000568:	409a      	lsls	r2, r3
 800056a:	0013      	movs	r3, r2
 800056c:	1e5a      	subs	r2, r3, #1
 800056e:	4193      	sbcs	r3, r2
 8000570:	430b      	orrs	r3, r1
 8000572:	e720      	b.n	80003b6 <__aeabi_fsub+0x152>
 8000574:	4663      	mov	r3, ip
 8000576:	000c      	movs	r4, r1
 8000578:	2501      	movs	r5, #1
 800057a:	1ac3      	subs	r3, r0, r3
 800057c:	e69b      	b.n	80002b6 <__aeabi_fsub+0x52>
 800057e:	2800      	cmp	r0, #0
 8000580:	d099      	beq.n	80004b6 <__aeabi_fsub+0x252>
 8000582:	000c      	movs	r4, r1
 8000584:	4646      	mov	r6, r8
 8000586:	2200      	movs	r2, #0
 8000588:	e6b7      	b.n	80002fa <__aeabi_fsub+0x96>
 800058a:	4646      	mov	r6, r8
 800058c:	2200      	movs	r2, #0
 800058e:	e6b4      	b.n	80002fa <__aeabi_fsub+0x96>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_fsub+0x332>
 8000594:	e73f      	b.n	8000416 <__aeabi_fsub+0x1b2>
 8000596:	2400      	movs	r4, #0
 8000598:	2600      	movs	r6, #0
 800059a:	e6ae      	b.n	80002fa <__aeabi_fsub+0x96>
 800059c:	fbffffff 	.word	0xfbffffff
 80005a0:	7dffffff 	.word	0x7dffffff

080005a4 <__aeabi_f2iz>:
 80005a4:	0241      	lsls	r1, r0, #9
 80005a6:	0042      	lsls	r2, r0, #1
 80005a8:	0fc3      	lsrs	r3, r0, #31
 80005aa:	0a49      	lsrs	r1, r1, #9
 80005ac:	2000      	movs	r0, #0
 80005ae:	0e12      	lsrs	r2, r2, #24
 80005b0:	2a7e      	cmp	r2, #126	; 0x7e
 80005b2:	dd03      	ble.n	80005bc <__aeabi_f2iz+0x18>
 80005b4:	2a9d      	cmp	r2, #157	; 0x9d
 80005b6:	dd02      	ble.n	80005be <__aeabi_f2iz+0x1a>
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <__aeabi_f2iz+0x3c>)
 80005ba:	1898      	adds	r0, r3, r2
 80005bc:	4770      	bx	lr
 80005be:	2080      	movs	r0, #128	; 0x80
 80005c0:	0400      	lsls	r0, r0, #16
 80005c2:	4301      	orrs	r1, r0
 80005c4:	2a95      	cmp	r2, #149	; 0x95
 80005c6:	dc07      	bgt.n	80005d8 <__aeabi_f2iz+0x34>
 80005c8:	2096      	movs	r0, #150	; 0x96
 80005ca:	1a82      	subs	r2, r0, r2
 80005cc:	40d1      	lsrs	r1, r2
 80005ce:	4248      	negs	r0, r1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f3      	bne.n	80005bc <__aeabi_f2iz+0x18>
 80005d4:	0008      	movs	r0, r1
 80005d6:	e7f1      	b.n	80005bc <__aeabi_f2iz+0x18>
 80005d8:	3a96      	subs	r2, #150	; 0x96
 80005da:	4091      	lsls	r1, r2
 80005dc:	e7f7      	b.n	80005ce <__aeabi_f2iz+0x2a>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	7fffffff 	.word	0x7fffffff

080005e4 <__aeabi_cfrcmple>:
 80005e4:	4684      	mov	ip, r0
 80005e6:	0008      	movs	r0, r1
 80005e8:	4661      	mov	r1, ip
 80005ea:	e7ff      	b.n	80005ec <__aeabi_cfcmpeq>

080005ec <__aeabi_cfcmpeq>:
 80005ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80005ee:	f000 f8bd 	bl	800076c <__lesf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d401      	bmi.n	80005fa <__aeabi_cfcmpeq+0xe>
 80005f6:	2100      	movs	r1, #0
 80005f8:	42c8      	cmn	r0, r1
 80005fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080005fc <__aeabi_fcmpeq>:
 80005fc:	b510      	push	{r4, lr}
 80005fe:	f000 f849 	bl	8000694 <__eqsf2>
 8000602:	4240      	negs	r0, r0
 8000604:	3001      	adds	r0, #1
 8000606:	bd10      	pop	{r4, pc}

08000608 <__aeabi_fcmplt>:
 8000608:	b510      	push	{r4, lr}
 800060a:	f000 f8af 	bl	800076c <__lesf2>
 800060e:	2800      	cmp	r0, #0
 8000610:	db01      	blt.n	8000616 <__aeabi_fcmplt+0xe>
 8000612:	2000      	movs	r0, #0
 8000614:	bd10      	pop	{r4, pc}
 8000616:	2001      	movs	r0, #1
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__aeabi_fcmple>:
 800061c:	b510      	push	{r4, lr}
 800061e:	f000 f8a5 	bl	800076c <__lesf2>
 8000622:	2800      	cmp	r0, #0
 8000624:	dd01      	ble.n	800062a <__aeabi_fcmple+0xe>
 8000626:	2000      	movs	r0, #0
 8000628:	bd10      	pop	{r4, pc}
 800062a:	2001      	movs	r0, #1
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fcmpgt>:
 8000630:	b510      	push	{r4, lr}
 8000632:	f000 f855 	bl	80006e0 <__gesf2>
 8000636:	2800      	cmp	r0, #0
 8000638:	dc01      	bgt.n	800063e <__aeabi_fcmpgt+0xe>
 800063a:	2000      	movs	r0, #0
 800063c:	bd10      	pop	{r4, pc}
 800063e:	2001      	movs	r0, #1
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__aeabi_fcmpge>:
 8000644:	b510      	push	{r4, lr}
 8000646:	f000 f84b 	bl	80006e0 <__gesf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	da01      	bge.n	8000652 <__aeabi_fcmpge+0xe>
 800064e:	2000      	movs	r0, #0
 8000650:	bd10      	pop	{r4, pc}
 8000652:	2001      	movs	r0, #1
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <__eqsf2>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	0042      	lsls	r2, r0, #1
 8000698:	0245      	lsls	r5, r0, #9
 800069a:	024e      	lsls	r6, r1, #9
 800069c:	004c      	lsls	r4, r1, #1
 800069e:	0fc3      	lsrs	r3, r0, #31
 80006a0:	0a6d      	lsrs	r5, r5, #9
 80006a2:	2001      	movs	r0, #1
 80006a4:	0e12      	lsrs	r2, r2, #24
 80006a6:	0a76      	lsrs	r6, r6, #9
 80006a8:	0e24      	lsrs	r4, r4, #24
 80006aa:	0fc9      	lsrs	r1, r1, #31
 80006ac:	2aff      	cmp	r2, #255	; 0xff
 80006ae:	d006      	beq.n	80006be <__eqsf2+0x2a>
 80006b0:	2cff      	cmp	r4, #255	; 0xff
 80006b2:	d003      	beq.n	80006bc <__eqsf2+0x28>
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	d101      	bne.n	80006bc <__eqsf2+0x28>
 80006b8:	42b5      	cmp	r5, r6
 80006ba:	d006      	beq.n	80006ca <__eqsf2+0x36>
 80006bc:	bd70      	pop	{r4, r5, r6, pc}
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d1fc      	bne.n	80006bc <__eqsf2+0x28>
 80006c2:	2cff      	cmp	r4, #255	; 0xff
 80006c4:	d1fa      	bne.n	80006bc <__eqsf2+0x28>
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d1f8      	bne.n	80006bc <__eqsf2+0x28>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d006      	beq.n	80006dc <__eqsf2+0x48>
 80006ce:	2001      	movs	r0, #1
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d1f3      	bne.n	80006bc <__eqsf2+0x28>
 80006d4:	0028      	movs	r0, r5
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	e7ef      	b.n	80006bc <__eqsf2+0x28>
 80006dc:	2000      	movs	r0, #0
 80006de:	e7ed      	b.n	80006bc <__eqsf2+0x28>

080006e0 <__gesf2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	0042      	lsls	r2, r0, #1
 80006e4:	0245      	lsls	r5, r0, #9
 80006e6:	024e      	lsls	r6, r1, #9
 80006e8:	004c      	lsls	r4, r1, #1
 80006ea:	0fc3      	lsrs	r3, r0, #31
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	0e12      	lsrs	r2, r2, #24
 80006f0:	0a76      	lsrs	r6, r6, #9
 80006f2:	0e24      	lsrs	r4, r4, #24
 80006f4:	0fc8      	lsrs	r0, r1, #31
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d01b      	beq.n	8000732 <__gesf2+0x52>
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d00e      	beq.n	800071c <__gesf2+0x3c>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d11b      	bne.n	800073a <__gesf2+0x5a>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d101      	bne.n	800070a <__gesf2+0x2a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d01c      	beq.n	8000744 <__gesf2+0x64>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d00c      	beq.n	8000728 <__gesf2+0x48>
 800070e:	4283      	cmp	r3, r0
 8000710:	d01c      	beq.n	800074c <__gesf2+0x6c>
 8000712:	2102      	movs	r1, #2
 8000714:	1e58      	subs	r0, r3, #1
 8000716:	4008      	ands	r0, r1
 8000718:	3801      	subs	r0, #1
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	2e00      	cmp	r6, #0
 800071e:	d122      	bne.n	8000766 <__gesf2+0x86>
 8000720:	2a00      	cmp	r2, #0
 8000722:	d1f4      	bne.n	800070e <__gesf2+0x2e>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d1f2      	bne.n	800070e <__gesf2+0x2e>
 8000728:	2800      	cmp	r0, #0
 800072a:	d1f6      	bne.n	800071a <__gesf2+0x3a>
 800072c:	2001      	movs	r0, #1
 800072e:	4240      	negs	r0, r0
 8000730:	e7f3      	b.n	800071a <__gesf2+0x3a>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d117      	bne.n	8000766 <__gesf2+0x86>
 8000736:	2cff      	cmp	r4, #255	; 0xff
 8000738:	d0f0      	beq.n	800071c <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d1e7      	bne.n	800070e <__gesf2+0x2e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1e5      	bne.n	800070e <__gesf2+0x2e>
 8000742:	e7e6      	b.n	8000712 <__gesf2+0x32>
 8000744:	2000      	movs	r0, #0
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e7      	beq.n	800071a <__gesf2+0x3a>
 800074a:	e7e2      	b.n	8000712 <__gesf2+0x32>
 800074c:	42a2      	cmp	r2, r4
 800074e:	dc05      	bgt.n	800075c <__gesf2+0x7c>
 8000750:	dbea      	blt.n	8000728 <__gesf2+0x48>
 8000752:	42b5      	cmp	r5, r6
 8000754:	d802      	bhi.n	800075c <__gesf2+0x7c>
 8000756:	d3e7      	bcc.n	8000728 <__gesf2+0x48>
 8000758:	2000      	movs	r0, #0
 800075a:	e7de      	b.n	800071a <__gesf2+0x3a>
 800075c:	4243      	negs	r3, r0
 800075e:	4158      	adcs	r0, r3
 8000760:	0040      	lsls	r0, r0, #1
 8000762:	3801      	subs	r0, #1
 8000764:	e7d9      	b.n	800071a <__gesf2+0x3a>
 8000766:	2002      	movs	r0, #2
 8000768:	4240      	negs	r0, r0
 800076a:	e7d6      	b.n	800071a <__gesf2+0x3a>

0800076c <__lesf2>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	0042      	lsls	r2, r0, #1
 8000770:	0245      	lsls	r5, r0, #9
 8000772:	024e      	lsls	r6, r1, #9
 8000774:	004c      	lsls	r4, r1, #1
 8000776:	0fc3      	lsrs	r3, r0, #31
 8000778:	0a6d      	lsrs	r5, r5, #9
 800077a:	0e12      	lsrs	r2, r2, #24
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	0e24      	lsrs	r4, r4, #24
 8000780:	0fc8      	lsrs	r0, r1, #31
 8000782:	2aff      	cmp	r2, #255	; 0xff
 8000784:	d00b      	beq.n	800079e <__lesf2+0x32>
 8000786:	2cff      	cmp	r4, #255	; 0xff
 8000788:	d00d      	beq.n	80007a6 <__lesf2+0x3a>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d11f      	bne.n	80007ce <__lesf2+0x62>
 800078e:	2c00      	cmp	r4, #0
 8000790:	d116      	bne.n	80007c0 <__lesf2+0x54>
 8000792:	2e00      	cmp	r6, #0
 8000794:	d114      	bne.n	80007c0 <__lesf2+0x54>
 8000796:	2000      	movs	r0, #0
 8000798:	2d00      	cmp	r5, #0
 800079a:	d010      	beq.n	80007be <__lesf2+0x52>
 800079c:	e009      	b.n	80007b2 <__lesf2+0x46>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d10c      	bne.n	80007bc <__lesf2+0x50>
 80007a2:	2cff      	cmp	r4, #255	; 0xff
 80007a4:	d113      	bne.n	80007ce <__lesf2+0x62>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d108      	bne.n	80007bc <__lesf2+0x50>
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d008      	beq.n	80007c0 <__lesf2+0x54>
 80007ae:	4283      	cmp	r3, r0
 80007b0:	d012      	beq.n	80007d8 <__lesf2+0x6c>
 80007b2:	2102      	movs	r1, #2
 80007b4:	1e58      	subs	r0, r3, #1
 80007b6:	4008      	ands	r0, r1
 80007b8:	3801      	subs	r0, #1
 80007ba:	e000      	b.n	80007be <__lesf2+0x52>
 80007bc:	2002      	movs	r0, #2
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d1f4      	bne.n	80007ae <__lesf2+0x42>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1fa      	bne.n	80007be <__lesf2+0x52>
 80007c8:	2001      	movs	r0, #1
 80007ca:	4240      	negs	r0, r0
 80007cc:	e7f7      	b.n	80007be <__lesf2+0x52>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d1ed      	bne.n	80007ae <__lesf2+0x42>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d1eb      	bne.n	80007ae <__lesf2+0x42>
 80007d6:	e7ec      	b.n	80007b2 <__lesf2+0x46>
 80007d8:	42a2      	cmp	r2, r4
 80007da:	dc05      	bgt.n	80007e8 <__lesf2+0x7c>
 80007dc:	dbf2      	blt.n	80007c4 <__lesf2+0x58>
 80007de:	42b5      	cmp	r5, r6
 80007e0:	d802      	bhi.n	80007e8 <__lesf2+0x7c>
 80007e2:	d3ef      	bcc.n	80007c4 <__lesf2+0x58>
 80007e4:	2000      	movs	r0, #0
 80007e6:	e7ea      	b.n	80007be <__lesf2+0x52>
 80007e8:	4243      	negs	r3, r0
 80007ea:	4158      	adcs	r0, r3
 80007ec:	0040      	lsls	r0, r0, #1
 80007ee:	3801      	subs	r0, #1
 80007f0:	e7e5      	b.n	80007be <__lesf2+0x52>
 80007f2:	46c0      	nop			; (mov r8, r8)

080007f4 <delay>:
 */
#include"DHT11.h"


void delay (uint16_t time)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <delay+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <delay+0x30>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3f8      	bcc.n	800080a <delay+0x16>
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000f0 	.word	0x200000f0

08000828 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	000a      	movs	r2, r1
 8000832:	1cbb      	adds	r3, r7, #2
 8000834:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	240c      	movs	r4, #12
 8000838:	193b      	adds	r3, r7, r4
 800083a:	0018      	movs	r0, r3
 800083c:	2314      	movs	r3, #20
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 fa3b 	bl	8004cbc <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	193b      	adds	r3, r7, r4
 800084c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2201      	movs	r2, #1
 8000852:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800085a:	193a      	adds	r2, r7, r4
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fbe5 	bl	8002030 <HAL_GPIO_Init>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b009      	add	sp, #36	; 0x24
 800086c:	bd90      	pop	{r4, r7, pc}

0800086e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800086e:	b590      	push	{r4, r7, lr}
 8000870:	b089      	sub	sp, #36	; 0x24
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	000a      	movs	r2, r1
 8000878:	1cbb      	adds	r3, r7, #2
 800087a:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	240c      	movs	r4, #12
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f004 fa18 	bl	8004cbc <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 800088c:	1cbb      	adds	r3, r7, #2
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	193b      	adds	r3, r7, r4
 8000892:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2201      	movs	r2, #1
 800089e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80008a0:	193a      	adds	r2, r7, r4
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fbc2 	bl	8002030 <HAL_GPIO_Init>
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b009      	add	sp, #36	; 0x24
 80008b2:	bd90      	pop	{r4, r7, pc}

080008b4 <DHT11_Start>:
void DHT11_Start (void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  		// set the pin as output
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2102      	movs	r1, #2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ffb2 	bl	8000828 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low as Start Signal.
 80008c4:	2390      	movs	r3, #144	; 0x90
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fd44 	bl	800235a <HAL_GPIO_WritePin>
	delay (18000);
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <DHT11_Start+0x40>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ff8d 	bl	80007f4 <delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 80008da:	2390      	movs	r3, #144	; 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fd39 	bl	800235a <HAL_GPIO_WritePin>
	delay (40);
 80008e8:	2028      	movs	r0, #40	; 0x28
 80008ea:	f7ff ff83 	bl	80007f4 <delay>
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	00004650 	.word	0x00004650

080008f8 <Check_Response>:
uint8_t Check_Response (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

	Set_Pin_Input(DHT11_PORT, DHT11_PIN); // Set up GPIO as input for signal reading.
 80008fe:	2390      	movs	r3, #144	; 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2102      	movs	r1, #2
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ffb2 	bl	800086e <Set_Pin_Input>

	uint8_t Response = 0;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
	delay (50);
 8000910:	2032      	movs	r0, #50	; 0x32
 8000912:	f7ff ff6f 	bl	80007f4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2102      	movs	r1, #2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fcff 	bl	8002320 <HAL_GPIO_ReadPin>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d111      	bne.n	800094a <Check_Response+0x52>
	{
		delay (70);
 8000926:	2046      	movs	r0, #70	; 0x46
 8000928:	f7ff ff64 	bl	80007f4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800092c:	2390      	movs	r3, #144	; 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2102      	movs	r1, #2
 8000932:	0018      	movs	r0, r3
 8000934:	f001 fcf4 	bl	8002320 <HAL_GPIO_ReadPin>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d003      	beq.n	8000944 <Check_Response+0x4c>
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e002      	b.n	800094a <Check_Response+0x52>
		else Response = -1;
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	2390      	movs	r3, #144	; 0x90
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2102      	movs	r1, #2
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fce4 	bl	8002320 <HAL_GPIO_ReadPin>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d1f7      	bne.n	800094c <Check_Response+0x54>

	return Response;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT11_PORT, DHT11_PIN); // Set up GPIO as input for signal reading.
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2102      	movs	r1, #2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff7a 	bl	800086e <Set_Pin_Input>

	uint8_t Data_Raw,j;
	for (j=0;j<8;j++)
 800097a:	1dbb      	adds	r3, r7, #6
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e042      	b.n	8000a08 <DHT11_Read+0xa0>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // Get Ready signal
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2390      	movs	r3, #144	; 0x90
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	2102      	movs	r1, #2
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fcc8 	bl	8002320 <HAL_GPIO_ReadPin>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d0f7      	beq.n	8000984 <DHT11_Read+0x1c>
		delay (50);   // wait for 50 us
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f7ff ff2d 	bl	80007f4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2102      	movs	r1, #2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fcbd 	bl	8002320 <HAL_GPIO_ReadPin>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d111      	bne.n	80009ce <DHT11_Read+0x66>
		{
			Data_Raw&= ~(1<<(7-j));   // write 0
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2207      	movs	r2, #7
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2201      	movs	r2, #1
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	b252      	sxtb	r2, r2
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25a      	sxtb	r2, r3
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e00e      	b.n	80009ec <DHT11_Read+0x84>
		}
		else Data_Raw|= (1<<(7-j));  //  write 1
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2207      	movs	r2, #7
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2201      	movs	r2, #1
 80009d8:	409a      	lsls	r2, r3
 80009da:	0013      	movs	r3, r2
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	2390      	movs	r3, #144	; 0x90
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2102      	movs	r1, #2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fc93 	bl	8002320 <HAL_GPIO_ReadPin>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d1f7      	bne.n	80009ee <DHT11_Read+0x86>
	for (j=0;j<8;j++)
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	3201      	adds	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	1dbb      	adds	r3, r7, #6
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b07      	cmp	r3, #7
 8000a0e:	d9b8      	bls.n	8000982 <DHT11_Read+0x1a>
	}
	return Data_Raw;
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	0005      	movs	r5, r0
 8000a24:	000c      	movs	r4, r1
 8000a26:	0010      	movs	r0, r2
 8000a28:	0019      	movs	r1, r3
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	1c2a      	adds	r2, r5, #0
 8000a2e:	801a      	strh	r2, [r3, #0]
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	1c22      	adds	r2, r4, #0
 8000a34:	801a      	strh	r2, [r3, #0]
 8000a36:	1cbb      	adds	r3, r7, #2
 8000a38:	1c02      	adds	r2, r0, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	1c0a      	adds	r2, r1, #0
 8000a40:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	8818      	ldrh	r0, [r3, #0]
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	8819      	ldrh	r1, [r3, #0]
 8000a4a:	1cbb      	adds	r3, r7, #2
 8000a4c:	881a      	ldrh	r2, [r3, #0]
 8000a4e:	003b      	movs	r3, r7
 8000a50:	881c      	ldrh	r4, [r3, #0]
 8000a52:	2318      	movs	r3, #24
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	0023      	movs	r3, r4
 8000a5c:	f000 fb30 	bl	80010c0 <ST7735_FillRectangle>
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bdb0      	pop	{r4, r5, r7, pc}

08000a68 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <fillScreen+0x30>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	5e9a      	ldrsh	r2, [r3, r2]
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <fillScreen+0x34>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	5e59      	ldrsh	r1, [r3, r1]
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	000b      	movs	r3, r1
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffc6 	bl	8000a1c <fillRect>
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	20000082 	.word	0x20000082

08000aa0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <ST7735_Select+0x18>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 fc55 	bl	800235a <HAL_GPIO_WritePin>
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	48000400 	.word	0x48000400

08000abc <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <ST7735_Unselect+0x18>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fc47 	bl	800235a <HAL_GPIO_WritePin>
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <ST7735_Reset>:

void ST7735_Reset()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <ST7735_Reset+0x28>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 fc39 	bl	800235a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f001 f9c9 	bl	8001e80 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <ST7735_Reset+0x28>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 fc30 	bl	800235a <HAL_GPIO_WritePin>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	48000800 	.word	0x48000800

08000b04 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	0099      	lsls	r1, r3, #2
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fc1d 	bl	800235a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	1df9      	adds	r1, r7, #7
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <ST7735_WriteCommand+0x34>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f002 fadb 	bl	80030e4 <HAL_SPI_Transmit>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	2000008c 	.word	0x2000008c

08000b3c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	0099      	lsls	r1, r3, #2
 8000b4a:	2390      	movs	r3, #144	; 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	2201      	movs	r2, #1
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 fc02 	bl	800235a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <ST7735_WriteData+0x34>)
 8000b62:	f002 fabf 	bl	80030e4 <HAL_SPI_Transmit>
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	2000008c 	.word	0x2000008c

08000b74 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	220f      	movs	r2, #15
 8000b84:	18ba      	adds	r2, r7, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8000b8a:	e04a      	b.n	8000c22 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	210b      	movs	r1, #11
 8000b94:	187a      	adds	r2, r7, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ffb0 	bl	8000b04 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	200a      	movs	r0, #10
 8000bac:	183a      	adds	r2, r7, r0
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	230c      	movs	r3, #12
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	183a      	adds	r2, r7, r0
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	217f      	movs	r1, #127	; 0x7f
 8000bca:	400a      	ands	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8000bce:	183b      	adds	r3, r7, r0
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000bd6:	0004      	movs	r4, r0
 8000bd8:	183b      	adds	r3, r7, r0
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffab 	bl	8000b3c <ST7735_WriteData>
            addr += numArgs;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d013      	beq.n	8000c22 <DisplayInit+0xae>
            ms = *addr++;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2bff      	cmp	r3, #255	; 0xff
 8000c0c:	d103      	bne.n	8000c16 <DisplayInit+0xa2>
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	22fa      	movs	r2, #250	; 0xfa
 8000c12:	0052      	lsls	r2, r2, #1
 8000c14:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8000c16:	230c      	movs	r3, #12
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 f92f 	bl	8001e80 <HAL_Delay>
    while(numCommands--) {
 8000c22:	220f      	movs	r2, #15
 8000c24:	18bb      	adds	r3, r7, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	18ba      	adds	r2, r7, r2
 8000c2a:	1e59      	subs	r1, r3, #1
 8000c2c:	7011      	strb	r1, [r2, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ac      	bne.n	8000b8c <DisplayInit+0x18>
        }
    }
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b005      	add	sp, #20
 8000c3a:	bd90      	pop	{r4, r7, pc}

08000c3c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0005      	movs	r5, r0
 8000c44:	000c      	movs	r4, r1
 8000c46:	0010      	movs	r0, r2
 8000c48:	0019      	movs	r1, r3
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	1c2a      	adds	r2, r5, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	1dbb      	adds	r3, r7, #6
 8000c52:	1c22      	adds	r2, r4, #0
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	1d7b      	adds	r3, r7, #5
 8000c58:	1c02      	adds	r2, r0, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	1c0a      	adds	r2, r1, #0
 8000c60:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000c62:	202a      	movs	r0, #42	; 0x2a
 8000c64:	f7ff ff4e 	bl	8000b04 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000c68:	210c      	movs	r1, #12
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <ST7735_SetAddressWindow+0xa8>)
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	705a      	strb	r2, [r3, #1]
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	709a      	strb	r2, [r3, #2]
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <ST7735_SetAddressWindow+0xa8>)
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	1d7b      	adds	r3, r7, #5
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000c96:	000c      	movs	r4, r1
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff4d 	bl	8000b3c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ca2:	202b      	movs	r0, #43	; 0x2b
 8000ca4:	f7ff ff2e 	bl	8000b04 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <ST7735_SetAddressWindow+0xac>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	1dbb      	adds	r3, r7, #6
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <ST7735_SetAddressWindow+0xac>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2104      	movs	r1, #4
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff34 	bl	8000b3c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000cd4:	202c      	movs	r0, #44	; 0x2c
 8000cd6:	f7ff ff15 	bl	8000b04 <ST7735_WriteCommand>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000087 	.word	0x20000087
 8000ce8:	20000088 	.word	0x20000088

08000cec <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8000cf8:	f7ff fed2 	bl	8000aa0 <ST7735_Select>
    ST7735_Reset();
 8000cfc:	f7ff feec 	bl	8000ad8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <ST7735_Init+0x50>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff36 	bl	8000b74 <DisplayInit>
    DisplayInit(init_cmds2);
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <ST7735_Init+0x54>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff32 	bl	8000b74 <DisplayInit>
    DisplayInit(init_cmds3);
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <ST7735_Init+0x58>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff ff2e 	bl	8000b74 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <ST7735_Init+0x5c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <ST7735_Init+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 f811 	bl	8000d50 <ST7735_SetRotation>
    ST7735_Unselect();
 8000d2e:	f7ff fec5 	bl	8000abc <ST7735_Unselect>

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	080055fc 	.word	0x080055fc
 8000d40:	08005634 	.word	0x08005634
 8000d44:	08005644 	.word	0x08005644
 8000d48:	20000085 	.word	0x20000085
 8000d4c:	20000086 	.word	0x20000086

08000d50 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0002      	movs	r2, r0
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <ST7735_SetRotation+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <ST7735_SetRotation+0xf8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d041      	beq.n	8000dfe <ST7735_SetRotation+0xae>
 8000d7a:	dc53      	bgt.n	8000e24 <ST7735_SetRotation+0xd4>
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d02b      	beq.n	8000dd8 <ST7735_SetRotation+0x88>
 8000d80:	dc50      	bgt.n	8000e24 <ST7735_SetRotation+0xd4>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <ST7735_SetRotation+0x3c>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d013      	beq.n	8000db2 <ST7735_SetRotation+0x62>
 8000d8a:	e04b      	b.n	8000e24 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <ST7735_SetRotation+0xfc>)
 8000d96:	22a0      	movs	r2, #160	; 0xa0
 8000d98:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <ST7735_SetRotation+0x100>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <ST7735_SetRotation+0x104>)
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <ST7735_SetRotation+0x108>)
 8000da6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <ST7735_SetRotation+0x10c>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <ST7735_SetRotation+0x110>)
 8000dae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000db0:	e038      	b.n	8000e24 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000db2:	230f      	movs	r3, #15
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	22a0      	movs	r2, #160	; 0xa0
 8000db8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <ST7735_SetRotation+0x100>)
 8000dbc:	22a0      	movs	r2, #160	; 0xa0
 8000dbe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <ST7735_SetRotation+0xfc>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <ST7735_SetRotation+0x104>)
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <ST7735_SetRotation+0x110>)
 8000dcc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <ST7735_SetRotation+0x10c>)
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <ST7735_SetRotation+0x108>)
 8000dd4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000dd6:	e025      	b.n	8000e24 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <ST7735_SetRotation+0xfc>)
 8000de2:	22a0      	movs	r2, #160	; 0xa0
 8000de4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <ST7735_SetRotation+0x100>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <ST7735_SetRotation+0x104>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <ST7735_SetRotation+0x108>)
 8000df2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <ST7735_SetRotation+0x10c>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <ST7735_SetRotation+0x110>)
 8000dfa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000dfc:	e012      	b.n	8000e24 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2260      	movs	r2, #96	; 0x60
 8000e04:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <ST7735_SetRotation+0x100>)
 8000e08:	22a0      	movs	r2, #160	; 0xa0
 8000e0a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <ST7735_SetRotation+0xfc>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <ST7735_SetRotation+0x104>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <ST7735_SetRotation+0x110>)
 8000e18:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <ST7735_SetRotation+0x10c>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <ST7735_SetRotation+0x108>)
 8000e20:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000e22:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8000e24:	f7ff fe3c 	bl	8000aa0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f7ff fe6b 	bl	8000b04 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000e2e:	230f      	movs	r3, #15
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	2101      	movs	r1, #1
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fe81 	bl	8000b3c <ST7735_WriteData>
  ST7735_Unselect();
 8000e3a:	f7ff fe3f 	bl	8000abc <ST7735_Unselect>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	20000082 	.word	0x20000082
 8000e50:	20000080 	.word	0x20000080
 8000e54:	20000085 	.word	0x20000085
 8000e58:	20000087 	.word	0x20000087
 8000e5c:	20000086 	.word	0x20000086
 8000e60:	20000088 	.word	0x20000088

08000e64 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e64:	b082      	sub	sp, #8
 8000e66:	b5b0      	push	{r4, r5, r7, lr}
 8000e68:	b088      	sub	sp, #32
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	0004      	movs	r4, r0
 8000e6e:	0008      	movs	r0, r1
 8000e70:	0011      	movs	r1, r2
 8000e72:	2204      	movs	r2, #4
 8000e74:	2530      	movs	r5, #48	; 0x30
 8000e76:	1952      	adds	r2, r2, r5
 8000e78:	19d2      	adds	r2, r2, r7
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	1c22      	adds	r2, r4, #0
 8000e80:	801a      	strh	r2, [r3, #0]
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	1c02      	adds	r2, r0, #0
 8000e86:	801a      	strh	r2, [r3, #0]
 8000e88:	1cfb      	adds	r3, r7, #3
 8000e8a:	1c0a      	adds	r2, r1, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000e8e:	1dbb      	adds	r3, r7, #6
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b2d9      	uxtb	r1, r3
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	195b      	adds	r3, r3, r5
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b2dc      	uxtb	r4, r3
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	195b      	adds	r3, r3, r5
 8000eba:	19db      	adds	r3, r3, r7
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	0022      	movs	r2, r4
 8000ec8:	f7ff feb8 	bl	8000c3c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	e053      	b.n	8000f7a <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	2030      	movs	r0, #48	; 0x30
 8000ed6:	181b      	adds	r3, r3, r0
 8000ed8:	19db      	adds	r3, r3, r7
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	1cfb      	adds	r3, r7, #3
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3b20      	subs	r3, #32
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	1809      	adds	r1, r1, r0
 8000ee6:	19c9      	adds	r1, r1, r7
 8000ee8:	7849      	ldrb	r1, [r1, #1]
 8000eea:	434b      	muls	r3, r1
 8000eec:	0019      	movs	r1, r3
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	18cb      	adds	r3, r1, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	e030      	b.n	8000f62 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	409a      	lsls	r2, r3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000f0e:	203c      	movs	r0, #60	; 0x3c
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	183b      	adds	r3, r7, r0
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff fe04 	bl	8000b3c <ST7735_WriteData>
 8000f34:	e012      	b.n	8000f5c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000f36:	2040      	movs	r0, #64	; 0x40
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	210c      	movs	r1, #12
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	183b      	adds	r3, r7, r0
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2102      	movs	r1, #2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff fdf0 	bl	8000b3c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	2304      	movs	r3, #4
 8000f64:	2230      	movs	r2, #48	; 0x30
 8000f66:	189b      	adds	r3, r3, r2
 8000f68:	19db      	adds	r3, r3, r7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d3c5      	bcc.n	8000f00 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	2230      	movs	r2, #48	; 0x30
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	19db      	adds	r3, r3, r7
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	001a      	movs	r2, r3
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d3a2      	bcc.n	8000ed2 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b008      	add	sp, #32
 8000f94:	bcb0      	pop	{r4, r5, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	b002      	add	sp, #8
 8000f9a:	4718      	bx	r3

08000f9c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa0:	b087      	sub	sp, #28
 8000fa2:	af04      	add	r7, sp, #16
 8000fa4:	603a      	str	r2, [r7, #0]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	2418      	movs	r4, #24
 8000faa:	1912      	adds	r2, r2, r4
 8000fac:	2408      	movs	r4, #8
 8000fae:	46a4      	mov	ip, r4
 8000fb0:	44bc      	add	ip, r7
 8000fb2:	4462      	add	r2, ip
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	1c02      	adds	r2, r0, #0
 8000fba:	801a      	strh	r2, [r3, #0]
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	1c0a      	adds	r2, r1, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8000fc2:	f7ff fd6d 	bl	8000aa0 <ST7735_Select>

    while(*str) {
 8000fc6:	e067      	b.n	8001098 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2204      	movs	r2, #4
 8000fce:	2118      	movs	r1, #24
 8000fd0:	1852      	adds	r2, r2, r1
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	44bc      	add	ip, r7
 8000fd8:	4462      	add	r2, ip
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <ST7735_WriteString+0x11c>)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	5e12      	ldrsh	r2, [r2, r0]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	db27      	blt.n	8001038 <ST7735_WriteString+0x9c>
            x = 0;
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	2200      	movs	r2, #0
 8000fec:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	185b      	adds	r3, r3, r1
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	44bc      	add	ip, r7
 8000ffa:	4463      	add	r3, ip
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	1d3a      	adds	r2, r7, #4
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	188a      	adds	r2, r1, r2
 8001008:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2204      	movs	r2, #4
 8001010:	1812      	adds	r2, r2, r0
 8001012:	2108      	movs	r1, #8
 8001014:	468c      	mov	ip, r1
 8001016:	44bc      	add	ip, r7
 8001018:	4462      	add	r2, ip
 800101a:	7852      	ldrb	r2, [r2, #1]
 800101c:	189b      	adds	r3, r3, r2
 800101e:	4a27      	ldr	r2, [pc, #156]	; (80010bc <ST7735_WriteString+0x120>)
 8001020:	2100      	movs	r1, #0
 8001022:	5e52      	ldrsh	r2, [r2, r1]
 8001024:	4293      	cmp	r3, r2
 8001026:	da3c      	bge.n	80010a2 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b20      	cmp	r3, #32
 800102e:	d103      	bne.n	8001038 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	603b      	str	r3, [r7, #0]
                continue;
 8001036:	e02f      	b.n	8001098 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	781d      	ldrb	r5, [r3, #0]
 800103c:	2304      	movs	r3, #4
 800103e:	2618      	movs	r6, #24
 8001040:	199b      	adds	r3, r3, r6
 8001042:	2208      	movs	r2, #8
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	1d3a      	adds	r2, r7, #4
 800104c:	8814      	ldrh	r4, [r2, #0]
 800104e:	1dba      	adds	r2, r7, #6
 8001050:	8810      	ldrh	r0, [r2, #0]
 8001052:	2228      	movs	r2, #40	; 0x28
 8001054:	2108      	movs	r1, #8
 8001056:	1852      	adds	r2, r2, r1
 8001058:	19d2      	adds	r2, r2, r7
 800105a:	8812      	ldrh	r2, [r2, #0]
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	1852      	adds	r2, r2, r1
 8001062:	19d2      	adds	r2, r2, r7
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	466a      	mov	r2, sp
 800106a:	6859      	ldr	r1, [r3, #4]
 800106c:	6011      	str	r1, [r2, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	002a      	movs	r2, r5
 8001072:	0021      	movs	r1, r4
 8001074:	f7ff fef6 	bl	8000e64 <ST7735_WriteChar>
        x += font.width;
 8001078:	2304      	movs	r3, #4
 800107a:	199b      	adds	r3, r3, r6
 800107c:	2208      	movs	r2, #8
 800107e:	4694      	mov	ip, r2
 8001080:	44bc      	add	ip, r7
 8001082:	4463      	add	r3, ip
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b299      	uxth	r1, r3
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	1dba      	adds	r2, r7, #6
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	188a      	adds	r2, r1, r2
 8001090:	801a      	strh	r2, [r3, #0]
        str++;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d193      	bne.n	8000fc8 <ST7735_WriteString+0x2c>
 80010a0:	e000      	b.n	80010a4 <ST7735_WriteString+0x108>
                break;
 80010a2:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80010a4:	f7ff fd0a 	bl	8000abc <ST7735_Unselect>
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b003      	add	sp, #12
 80010ae:	bcf0      	pop	{r4, r5, r6, r7}
 80010b0:	bc08      	pop	{r3}
 80010b2:	b002      	add	sp, #8
 80010b4:	4718      	bx	r3
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	20000080 	.word	0x20000080
 80010bc:	20000082 	.word	0x20000082

080010c0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0005      	movs	r5, r0
 80010c8:	000c      	movs	r4, r1
 80010ca:	0010      	movs	r0, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	1dbb      	adds	r3, r7, #6
 80010d0:	1c2a      	adds	r2, r5, #0
 80010d2:	801a      	strh	r2, [r3, #0]
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	1c22      	adds	r2, r4, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	1c02      	adds	r2, r0, #0
 80010de:	801a      	strh	r2, [r3, #0]
 80010e0:	003b      	movs	r3, r7
 80010e2:	1c0a      	adds	r2, r1, #0
 80010e4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80010e6:	1dbb      	adds	r3, r7, #6
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <ST7735_FillRectangle+0x154>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	5e52      	ldrsh	r2, [r2, r1]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	db00      	blt.n	80010f6 <ST7735_FillRectangle+0x36>
 80010f4:	e089      	b.n	800120a <ST7735_FillRectangle+0x14a>
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4a47      	ldr	r2, [pc, #284]	; (8001218 <ST7735_FillRectangle+0x158>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	5e52      	ldrsh	r2, [r2, r1]
 8001100:	4293      	cmp	r3, r2
 8001102:	db00      	blt.n	8001106 <ST7735_FillRectangle+0x46>
 8001104:	e081      	b.n	800120a <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 8001106:	1dbb      	adds	r3, r7, #6
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	18d3      	adds	r3, r2, r3
 8001110:	4a40      	ldr	r2, [pc, #256]	; (8001214 <ST7735_FillRectangle+0x154>)
 8001112:	2100      	movs	r1, #0
 8001114:	5e52      	ldrsh	r2, [r2, r1]
 8001116:	4293      	cmp	r3, r2
 8001118:	dd08      	ble.n	800112c <ST7735_FillRectangle+0x6c>
 800111a:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <ST7735_FillRectangle+0x154>)
 800111c:	2200      	movs	r2, #0
 800111e:	5e9b      	ldrsh	r3, [r3, r2]
 8001120:	b299      	uxth	r1, r3
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	1dba      	adds	r2, r7, #6
 8001126:	8812      	ldrh	r2, [r2, #0]
 8001128:	1a8a      	subs	r2, r1, r2
 800112a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	003b      	movs	r3, r7
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	4a38      	ldr	r2, [pc, #224]	; (8001218 <ST7735_FillRectangle+0x158>)
 8001138:	2100      	movs	r1, #0
 800113a:	5e52      	ldrsh	r2, [r2, r1]
 800113c:	4293      	cmp	r3, r2
 800113e:	dd08      	ble.n	8001152 <ST7735_FillRectangle+0x92>
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <ST7735_FillRectangle+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	5e9b      	ldrsh	r3, [r3, r2]
 8001146:	b299      	uxth	r1, r3
 8001148:	003b      	movs	r3, r7
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	1a8a      	subs	r2, r1, r2
 8001150:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001152:	f7ff fca5 	bl	8000aa0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001156:	1dbb      	adds	r3, r7, #6
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b2d8      	uxtb	r0, r3
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b2d9      	uxtb	r1, r3
 8001162:	1dbb      	adds	r3, r7, #6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	1cbb      	adds	r3, r7, #2
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b2dc      	uxtb	r4, r3
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	003b      	movs	r3, r7
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	0022      	movs	r2, r4
 800118c:	f7ff fd56 	bl	8000c3c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001190:	2120      	movs	r1, #32
 8001192:	187b      	adds	r3, r7, r1
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	200c      	movs	r0, #12
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	183b      	adds	r3, r7, r0
 80011aa:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	0099      	lsls	r1, r3, #2
 80011b0:	2390      	movs	r3, #144	; 0x90
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2201      	movs	r2, #1
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 f8cf 	bl	800235a <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	003a      	movs	r2, r7
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	801a      	strh	r2, [r3, #0]
 80011c4:	e01a      	b.n	80011fc <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 80011c6:	1dbb      	adds	r3, r7, #6
 80011c8:	1cba      	adds	r2, r7, #2
 80011ca:	8812      	ldrh	r2, [r2, #0]
 80011cc:	801a      	strh	r2, [r3, #0]
 80011ce:	e00c      	b.n	80011ea <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80011d0:	2301      	movs	r3, #1
 80011d2:	425b      	negs	r3, r3
 80011d4:	220c      	movs	r2, #12
 80011d6:	18b9      	adds	r1, r7, r2
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <ST7735_FillRectangle+0x15c>)
 80011da:	2202      	movs	r2, #2
 80011dc:	f001 ff82 	bl	80030e4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80011e0:	1dbb      	adds	r3, r7, #6
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	3a01      	subs	r2, #1
 80011e8:	801a      	strh	r2, [r3, #0]
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ee      	bne.n	80011d0 <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	3a01      	subs	r2, #1
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e0      	bne.n	80011c6 <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 8001204:	f7ff fc5a 	bl	8000abc <ST7735_Unselect>
 8001208:	e000      	b.n	800120c <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 800120a:	46c0      	nop			; (mov r8, r8)
}
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000080 	.word	0x20000080
 8001218:	20000082 	.word	0x20000082
 800121c:	2000008c 	.word	0x2000008c

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f000 fdc8 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f820 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f000 f9d4 	bl	80015d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001230:	f000 f9a2 	bl	8001578 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001234:	f000 f86e 	bl	8001314 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001238:	f000 f962 	bl	8001500 <MX_TIM6_Init>
  MX_TIM1_Init();
 800123c:	f000 f8aa 	bl	8001394 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fd53 	bl	8000cec <ST7735_Init>
  LCD_Init();
 8001246:	f000 fa85 	bl	8001754 <LCD_Init>
  HAL_Delay(1000);
 800124a:	23fa      	movs	r3, #250	; 0xfa
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fe16 	bl	8001e80 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <main+0x48>)
 8001256:	2100      	movs	r1, #0
 8001258:	0018      	movs	r0, r3
 800125a:	f002 fac1 	bl	80037e0 <HAL_TIM_PWM_Start>
  DHT11_Start ();
 800125e:	f7ff fb29 	bl	80008b4 <DHT11_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LCD_Value_update();
 8001262:	f000 fb71 	bl	8001948 <LCD_Value_update>
 8001266:	e7fc      	b.n	8001262 <main+0x42>
 8001268:	200000f0 	.word	0x200000f0

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b099      	sub	sp, #100	; 0x64
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	242c      	movs	r4, #44	; 0x2c
 8001274:	193b      	adds	r3, r7, r4
 8001276:	0018      	movs	r0, r3
 8001278:	2334      	movs	r3, #52	; 0x34
 800127a:	001a      	movs	r2, r3
 800127c:	2100      	movs	r1, #0
 800127e:	f003 fd1d 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001282:	231c      	movs	r3, #28
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	0018      	movs	r0, r3
 8001288:	2310      	movs	r3, #16
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f003 fd15 	bl	8004cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001292:	003b      	movs	r3, r7
 8001294:	0018      	movs	r0, r3
 8001296:	231c      	movs	r3, #28
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f003 fd0e 	bl	8004cbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2220      	movs	r2, #32
 80012a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2201      	movs	r2, #1
 80012aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 f86d 	bl	8002394 <HAL_RCC_OscConfig>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80012be:	f000 fba1 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	211c      	movs	r1, #28
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2207      	movs	r2, #7
 80012c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2203      	movs	r2, #3
 80012ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2101      	movs	r1, #1
 80012e0:	0018      	movs	r0, r3
 80012e2:	f001 fbdd 	bl	8002aa0 <HAL_RCC_ClockConfig>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ea:	f000 fb8b 	bl	8001a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012ee:	003b      	movs	r3, r7
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012f4:	003b      	movs	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	003b      	movs	r3, r7
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fd3b 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001306:	f000 fb7d 	bl	8001a04 <Error_Handler>
  }
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b019      	add	sp, #100	; 0x64
 8001310:	bd90      	pop	{r4, r7, pc}
	...

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_SPI1_Init+0x78>)
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <MX_SPI1_Init+0x7c>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_SPI1_Init+0x78>)
 8001320:	2282      	movs	r2, #130	; 0x82
 8001322:	0052      	lsls	r2, r2, #1
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_SPI1_Init+0x78>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI1_Init+0x78>)
 8001330:	22e0      	movs	r2, #224	; 0xe0
 8001332:	00d2      	lsls	r2, r2, #3
 8001334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_SPI1_Init+0x78>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_SPI1_Init+0x78>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI1_Init+0x78>)
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_SPI1_Init+0x78>)
 800134c:	2208      	movs	r2, #8
 800134e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI1_Init+0x78>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <MX_SPI1_Init+0x78>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SPI1_Init+0x78>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MX_SPI1_Init+0x78>)
 8001364:	2207      	movs	r2, #7
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SPI1_Init+0x78>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <MX_SPI1_Init+0x78>)
 8001370:	2208      	movs	r2, #8
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <MX_SPI1_Init+0x78>)
 8001376:	0018      	movs	r0, r3
 8001378:	f001 fdfc 	bl	8002f74 <HAL_SPI_Init>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fb40 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	2000008c 	.word	0x2000008c
 8001390:	40013000 	.word	0x40013000

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	2348      	movs	r3, #72	; 0x48
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	0018      	movs	r0, r3
 80013a0:	2310      	movs	r3, #16
 80013a2:	001a      	movs	r2, r3
 80013a4:	2100      	movs	r1, #0
 80013a6:	f003 fc89 	bl	8004cbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	0018      	movs	r0, r3
 80013b0:	2308      	movs	r3, #8
 80013b2:	001a      	movs	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f003 fc81 	bl	8004cbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	2324      	movs	r3, #36	; 0x24
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	0018      	movs	r0, r3
 80013c0:	231c      	movs	r3, #28
 80013c2:	001a      	movs	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f003 fc79 	bl	8004cbc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2320      	movs	r3, #32
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f003 fc72 	bl	8004cbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013da:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <MX_TIM1_Init+0x164>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013e0:	2231      	movs	r2, #49	; 0x31
 80013e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <MX_TIM1_Init+0x168>)
 80013ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <MX_TIM1_Init+0x160>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_TIM1_Init+0x160>)
 8001404:	0018      	movs	r0, r3
 8001406:	f002 f943 	bl	8003690 <HAL_TIM_Base_Init>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800140e:	f000 faf9 	bl	8001a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	2148      	movs	r1, #72	; 0x48
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0152      	lsls	r2, r2, #5
 800141a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800141c:	187a      	adds	r2, r7, r1
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <MX_TIM1_Init+0x160>)
 8001420:	0011      	movs	r1, r2
 8001422:	0018      	movs	r0, r3
 8001424:	f002 fb5a 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800142c:	f000 faea 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_TIM1_Init+0x160>)
 8001432:	0018      	movs	r0, r3
 8001434:	f002 f97c 	bl	8003730 <HAL_TIM_PWM_Init>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800143c:	f000 fae2 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144e:	187a      	adds	r2, r7, r1
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <MX_TIM1_Init+0x160>)
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f002 ff4f 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800145e:	f000 fad1 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2124      	movs	r1, #36	; 0x24
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2260      	movs	r2, #96	; 0x60
 8001468:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148e:	1879      	adds	r1, r7, r1
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM1_Init+0x160>)
 8001492:	2200      	movs	r2, #0
 8001494:	0018      	movs	r0, r3
 8001496:	f002 fa5b 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800149e:	f000 fab1 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0192      	lsls	r2, r2, #6
 80014c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ce:	1d3a      	adds	r2, r7, #4
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_TIM1_Init+0x160>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f002 ff6d 	bl	80043b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80014de:	f000 fa91 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <MX_TIM1_Init+0x160>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 fb5d 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b016      	add	sp, #88	; 0x58
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200000f0 	.word	0x200000f0
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	0000fffe 	.word	0x0000fffe

08001500 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	003b      	movs	r3, r7
 8001508:	0018      	movs	r0, r3
 800150a:	2308      	movs	r3, #8
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f003 fbd4 	bl	8004cbc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM6_Init+0x6c>)
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <MX_TIM6_Init+0x70>)
 8001518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_TIM6_Init+0x6c>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_TIM6_Init+0x6c>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_TIM6_Init+0x6c>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_TIM6_Init+0x74>)
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_TIM6_Init+0x6c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_TIM6_Init+0x6c>)
 8001534:	0018      	movs	r0, r3
 8001536:	f002 f8ab 	bl	8003690 <HAL_TIM_Base_Init>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800153e:	f000 fa61 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	003b      	movs	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	003b      	movs	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154e:	003a      	movs	r2, r7
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_TIM6_Init+0x6c>)
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f002 fecf 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800155e:	f000 fa51 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	20000138 	.word	0x20000138
 8001570:	40001000 	.word	0x40001000
 8001574:	0000ffff 	.word	0x0000ffff

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART2_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001584:	2296      	movs	r2, #150	; 0x96
 8001586:	0212      	lsls	r2, r2, #8
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015bc:	0018      	movs	r0, r3
 80015be:	f002 ff57 	bl	8004470 <HAL_UART_Init>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 fa1d 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000180 	.word	0x20000180
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	2414      	movs	r4, #20
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	0018      	movs	r0, r3
 80015e4:	2314      	movs	r3, #20
 80015e6:	001a      	movs	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f003 fb67 	bl	8004cbc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <MX_GPIO_Init+0x170>)
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	4b55      	ldr	r3, [pc, #340]	; (8001748 <MX_GPIO_Init+0x170>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0309      	lsls	r1, r1, #12
 80015f8:	430a      	orrs	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <MX_GPIO_Init+0x170>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <MX_GPIO_Init+0x170>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <MX_GPIO_Init+0x170>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	03c9      	lsls	r1, r1, #15
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <MX_GPIO_Init+0x170>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	03db      	lsls	r3, r3, #15
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b48      	ldr	r3, [pc, #288]	; (8001748 <MX_GPIO_Init+0x170>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <MX_GPIO_Init+0x170>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0289      	lsls	r1, r1, #10
 8001630:	430a      	orrs	r2, r1
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <MX_GPIO_Init+0x170>)
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <MX_GPIO_Init+0x170>)
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <MX_GPIO_Init+0x170>)
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	02c9      	lsls	r1, r1, #11
 800164c:	430a      	orrs	r2, r1
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <MX_GPIO_Init+0x170>)
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	02db      	lsls	r3, r3, #11
 8001658:	4013      	ands	r3, r2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800165e:	2388      	movs	r3, #136	; 0x88
 8001660:	0099      	lsls	r1, r3, #2
 8001662:	2390      	movs	r3, #144	; 0x90
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	2200      	movs	r2, #0
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fe76 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <MX_GPIO_Init+0x174>)
 8001670:	2200      	movs	r2, #0
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fe70 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_GPIO_Init+0x178>)
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	0018      	movs	r0, r3
 8001682:	f000 fe6a 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001686:	193b      	adds	r3, r7, r4
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	0192      	lsls	r2, r2, #6
 800168c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168e:	193b      	adds	r3, r7, r4
 8001690:	2284      	movs	r2, #132	; 0x84
 8001692:	0392      	lsls	r2, r2, #14
 8001694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800169c:	193b      	adds	r3, r7, r4
 800169e:	4a2b      	ldr	r2, [pc, #172]	; (800174c <MX_GPIO_Init+0x174>)
 80016a0:	0019      	movs	r1, r3
 80016a2:	0010      	movs	r0, r2
 80016a4:	f000 fcc4 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	193a      	adds	r2, r7, r4
 80016bc:	2390      	movs	r3, #144	; 0x90
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 fcb4 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80016c8:	0021      	movs	r1, r4
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2288      	movs	r2, #136	; 0x88
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	000c      	movs	r4, r1
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	2201      	movs	r2, #1
 80016d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	193a      	adds	r2, r7, r4
 80016e8:	2390      	movs	r3, #144	; 0x90
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 fc9e 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2201      	movs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	193b      	adds	r3, r7, r4
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <MX_GPIO_Init+0x174>)
 8001710:	0019      	movs	r1, r3
 8001712:	0010      	movs	r0, r2
 8001714:	f000 fc8c 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001718:	0021      	movs	r1, r4
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2201      	movs	r2, #1
 8001724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	187b      	adds	r3, r7, r1
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <MX_GPIO_Init+0x178>)
 8001736:	0019      	movs	r1, r3
 8001738:	0010      	movs	r0, r2
 800173a:	f000 fc79 	bl	8002030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b00b      	add	sp, #44	; 0x2c
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40021000 	.word	0x40021000
 800174c:	48000800 	.word	0x48000800
 8001750:	48000400 	.word	0x48000400

08001754 <LCD_Init>:

/* USER CODE BEGIN 4 */
void LCD_Init(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af04      	add	r7, sp, #16
	  fillScreen(WHITE);
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <LCD_Init+0x70>)
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f983 	bl	8000a68 <fillScreen>
	  ST7735_WriteString(5, 5, "Temp: ", Font_16x26,BLACK,WHITE);
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <LCD_Init+0x74>)
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <LCD_Init+0x78>)
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <LCD_Init+0x70>)
 8001768:	9202      	str	r2, [sp, #8]
 800176a:	2200      	movs	r2, #0
 800176c:	9201      	str	r2, [sp, #4]
 800176e:	466a      	mov	r2, sp
 8001770:	6859      	ldr	r1, [r3, #4]
 8001772:	6011      	str	r1, [r2, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0002      	movs	r2, r0
 8001778:	2105      	movs	r1, #5
 800177a:	2005      	movs	r0, #5
 800177c:	f7ff fc0e 	bl	8000f9c <ST7735_WriteString>
	  ST7735_WriteString(5, 35, "Hum :% ", Font_16x26,BLACK,WHITE);
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <LCD_Init+0x74>)
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <LCD_Init+0x7c>)
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <LCD_Init+0x70>)
 8001786:	9202      	str	r2, [sp, #8]
 8001788:	2200      	movs	r2, #0
 800178a:	9201      	str	r2, [sp, #4]
 800178c:	466a      	mov	r2, sp
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	6011      	str	r1, [r2, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0002      	movs	r2, r0
 8001796:	2123      	movs	r1, #35	; 0x23
 8001798:	2005      	movs	r0, #5
 800179a:	f7ff fbff 	bl	8000f9c <ST7735_WriteString>
	  ST7735_WriteString(5, 65, "Fan :% ", Font_16x26,BLACK,WHITE);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <LCD_Init+0x74>)
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <LCD_Init+0x80>)
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <LCD_Init+0x70>)
 80017a4:	9202      	str	r2, [sp, #8]
 80017a6:	2200      	movs	r2, #0
 80017a8:	9201      	str	r2, [sp, #4]
 80017aa:	466a      	mov	r2, sp
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	6011      	str	r1, [r2, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0002      	movs	r2, r0
 80017b4:	2141      	movs	r1, #65	; 0x41
 80017b6:	2005      	movs	r0, #5
 80017b8:	f7ff fbf0 	bl	8000f9c <ST7735_WriteString>
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	0000ffff 	.word	0x0000ffff
 80017c8:	20000000 	.word	0x20000000
 80017cc:	080055e0 	.word	0x080055e0
 80017d0:	080055e8 	.word	0x080055e8
 80017d4:	080055f0 	.word	0x080055f0

080017d8 <LCD_Control_Temp>:

void LCD_Control_Temp(int8_t Temp){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af04      	add	r7, sp, #16
 80017de:	0002      	movs	r2, r0
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	701a      	strb	r2, [r3, #0]
	  char str[4];
	  sprintf(str, "%d", Temp);
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	2200      	movs	r2, #0
 80017e8:	569a      	ldrsb	r2, [r3, r2]
 80017ea:	490c      	ldr	r1, [pc, #48]	; (800181c <LCD_Control_Temp+0x44>)
 80017ec:	240c      	movs	r4, #12
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 fa43 	bl	8004c7c <siprintf>
	  ST7735_WriteString(85, 5, str , Font_16x26,BLACK,WHITE);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <LCD_Control_Temp+0x48>)
 80017f8:	1938      	adds	r0, r7, r4
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LCD_Control_Temp+0x4c>)
 80017fc:	9202      	str	r2, [sp, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	466a      	mov	r2, sp
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	6011      	str	r1, [r2, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0002      	movs	r2, r0
 800180c:	2105      	movs	r1, #5
 800180e:	2055      	movs	r0, #85	; 0x55
 8001810:	f7ff fbc4 	bl	8000f9c <ST7735_WriteString>
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b005      	add	sp, #20
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	080055f8 	.word	0x080055f8
 8001820:	20000000 	.word	0x20000000
 8001824:	0000ffff 	.word	0x0000ffff

08001828 <LCD_Control_Hum>:
void LCD_Control_Hum(uint8_t Hum){
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af04      	add	r7, sp, #16
 800182e:	0002      	movs	r2, r0
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	701a      	strb	r2, [r3, #0]
	  char str[4];
	  sprintf(str, "%d", Hum);
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <LCD_Control_Hum+0x44>)
 800183a:	240c      	movs	r4, #12
 800183c:	193b      	adds	r3, r7, r4
 800183e:	0018      	movs	r0, r3
 8001840:	f003 fa1c 	bl	8004c7c <siprintf>
	  ST7735_WriteString(105, 35, str , Font_16x26,BLACK,WHITE);
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <LCD_Control_Hum+0x48>)
 8001846:	1938      	adds	r0, r7, r4
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LCD_Control_Hum+0x4c>)
 800184a:	9202      	str	r2, [sp, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	9201      	str	r2, [sp, #4]
 8001850:	466a      	mov	r2, sp
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	6011      	str	r1, [r2, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0002      	movs	r2, r0
 800185a:	2123      	movs	r1, #35	; 0x23
 800185c:	2069      	movs	r0, #105	; 0x69
 800185e:	f7ff fb9d 	bl	8000f9c <ST7735_WriteString>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b005      	add	sp, #20
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	080055f8 	.word	0x080055f8
 8001870:	20000000 	.word	0x20000000
 8001874:	0000ffff 	.word	0x0000ffff

08001878 <LCD_Control_Fan>:
void LCD_Control_Fan(uint8_t Fan){
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af04      	add	r7, sp, #16
 800187e:	0002      	movs	r2, r0
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	701a      	strb	r2, [r3, #0]
	  char str[4];
	  sprintf(str, "%d", Fan);
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <LCD_Control_Fan+0x44>)
 800188a:	240c      	movs	r4, #12
 800188c:	193b      	adds	r3, r7, r4
 800188e:	0018      	movs	r0, r3
 8001890:	f003 f9f4 	bl	8004c7c <siprintf>
	  ST7735_WriteString(105, 65, str , Font_16x26,BLACK,WHITE);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <LCD_Control_Fan+0x48>)
 8001896:	1938      	adds	r0, r7, r4
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LCD_Control_Fan+0x4c>)
 800189a:	9202      	str	r2, [sp, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	9201      	str	r2, [sp, #4]
 80018a0:	466a      	mov	r2, sp
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	6011      	str	r1, [r2, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0002      	movs	r2, r0
 80018aa:	2141      	movs	r1, #65	; 0x41
 80018ac:	2069      	movs	r0, #105	; 0x69
 80018ae:	f7ff fb75 	bl	8000f9c <ST7735_WriteString>
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b005      	add	sp, #20
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	080055f8 	.word	0x080055f8
 80018c0:	20000000 	.word	0x20000000
 80018c4:	0000ffff 	.word	0x0000ffff

080018c8 <PWM_Control>:

void PWM_Control(uint16_t Temperature){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0002      	movs	r2, r0
 80018d0:	1dbb      	adds	r3, r7, #6
 80018d2:	801a      	strh	r2, [r3, #0]
	uint32_t Speed = 65534;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <PWM_Control+0x70>)
 80018d6:	60fb      	str	r3, [r7, #12]
	if(Temperature>=20){
 80018d8:	1dbb      	adds	r3, r7, #6
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	2b13      	cmp	r3, #19
 80018de:	d911      	bls.n	8001904 <PWM_Control+0x3c>
		Speed = Speed /35*Temperature ;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2123      	movs	r1, #35	; 0x23
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe fc19 	bl	800011c <__udivsi3>
 80018ea:	0003      	movs	r3, r0
 80018ec:	001a      	movs	r2, r3
 80018ee:	1dbb      	adds	r3, r7, #6
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4353      	muls	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
		if(Speed >= 65534){Speed = 65534;}
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <PWM_Control+0x74>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d904      	bls.n	8001908 <PWM_Control+0x40>
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <PWM_Control+0x70>)
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e001      	b.n	8001908 <PWM_Control+0x40>
	}else{
		Speed = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
	}
	uint8_t Lcd_Speed = Speed/653;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	490d      	ldr	r1, [pc, #52]	; (8001940 <PWM_Control+0x78>)
 800190c:	0018      	movs	r0, r3
 800190e:	f7fe fc05 	bl	800011c <__udivsi3>
 8001912:	0003      	movs	r3, r0
 8001914:	001a      	movs	r2, r3
 8001916:	210b      	movs	r1, #11
 8001918:	187b      	adds	r3, r7, r1
 800191a:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1 ,Speed);
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <PWM_Control+0x7c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
	LCD_Control_Fan((uint8_t)(Lcd_Speed));
 8001924:	187b      	adds	r3, r7, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ffa5 	bl	8001878 <LCD_Control_Fan>
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	0000fffe 	.word	0x0000fffe
 800193c:	0000fffd 	.word	0x0000fffd
 8001940:	0000028d 	.word	0x0000028d
 8001944:	200000f0 	.word	0x200000f0

08001948 <LCD_Value_update>:

void LCD_Value_update(){
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
	 uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	 uint16_t SUM, RH, TEMP;
	 float Temperature = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
	 float Humidity = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
	 uint8_t Presence = 1;
 8001956:	240f      	movs	r4, #15
 8001958:	193b      	adds	r3, r7, r4
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
	 DHT11_Start();
 800195e:	f7fe ffa9 	bl	80008b4 <DHT11_Start>
	 Presence = Check_Response();
 8001962:	193c      	adds	r4, r7, r4
 8001964:	f7fe ffc8 	bl	80008f8 <Check_Response>
 8001968:	0003      	movs	r3, r0
 800196a:	7023      	strb	r3, [r4, #0]
	 Rh_byte1 = DHT11_Read ();
 800196c:	250e      	movs	r5, #14
 800196e:	197c      	adds	r4, r7, r5
 8001970:	f7fe fffa 	bl	8000968 <DHT11_Read>
 8001974:	0003      	movs	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
	 Rh_byte2 = DHT11_Read ();
 8001978:	230d      	movs	r3, #13
 800197a:	18fc      	adds	r4, r7, r3
 800197c:	f7fe fff4 	bl	8000968 <DHT11_Read>
 8001980:	0003      	movs	r3, r0
 8001982:	7023      	strb	r3, [r4, #0]
     Temp_byte1 = DHT11_Read ();
 8001984:	260c      	movs	r6, #12
 8001986:	19bc      	adds	r4, r7, r6
 8001988:	f7fe ffee 	bl	8000968 <DHT11_Read>
 800198c:	0003      	movs	r3, r0
 800198e:	7023      	strb	r3, [r4, #0]
	 Temp_byte2 = DHT11_Read ();
 8001990:	230b      	movs	r3, #11
 8001992:	18fc      	adds	r4, r7, r3
 8001994:	f7fe ffe8 	bl	8000968 <DHT11_Read>
 8001998:	0003      	movs	r3, r0
 800199a:	7023      	strb	r3, [r4, #0]
	 SUM = DHT11_Read();
 800199c:	f7fe ffe4 	bl	8000968 <DHT11_Read>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	2308      	movs	r3, #8
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	801a      	strh	r2, [r3, #0]
	 TEMP = Temp_byte1;
 80019aa:	1dbb      	adds	r3, r7, #6
 80019ac:	19ba      	adds	r2, r7, r6
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	801a      	strh	r2, [r3, #0]
	 RH = Rh_byte1;
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	197a      	adds	r2, r7, r5
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	801a      	strh	r2, [r3, #0]
	 Temperature = 28, //(int8_t) TEMP;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <LCD_Value_update+0xb4>)
 80019bc:	617b      	str	r3, [r7, #20]
	 Humidity = 15 ;//(int8_t) RH;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <LCD_Value_update+0xb8>)
 80019c0:	613b      	str	r3, [r7, #16]
	 LCD_Control_Temp(Temperature);
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7fe fdee 	bl	80005a4 <__aeabi_f2iz>
 80019c8:	0003      	movs	r3, r0
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff03 	bl	80017d8 <LCD_Control_Temp>
	 LCD_Control_Hum(Humidity);
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f7fe fc2e 	bl	8000234 <__aeabi_f2uiz>
 80019d8:	0003      	movs	r3, r0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ff23 	bl	8001828 <LCD_Control_Hum>
	 PWM_Control(Temperature);
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7fe fc26 	bl	8000234 <__aeabi_f2uiz>
 80019e8:	0003      	movs	r3, r0
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff ff6b 	bl	80018c8 <PWM_Control>
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b007      	add	sp, #28
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	41e00000 	.word	0x41e00000
 8001a00:	41700000 	.word	0x41700000

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_MspInit+0x44>)
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_MspInit+0x44>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_MspInit+0x44>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x44>)
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_MspInit+0x44>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0549      	lsls	r1, r1, #21
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_MspInit+0x44>)
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	2414      	movs	r4, #20
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	2314      	movs	r3, #20
 8001a68:	001a      	movs	r2, r3
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f003 f926 	bl	8004cbc <memset>
  if(hspi->Instance==SPI1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_SPI_MspInit+0xd8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d155      	bne.n	8001b26 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0149      	lsls	r1, r1, #5
 8001a84:	430a      	orrs	r2, r1
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0289      	lsls	r1, r1, #10
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	02c9      	lsls	r1, r1, #11
 8001abc:	430a      	orrs	r2, r1
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_SPI_MspInit+0xdc>)
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	02db      	lsls	r3, r3, #11
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	193a      	adds	r2, r7, r4
 8001aee:	2390      	movs	r3, #144	; 0x90
 8001af0:	05db      	lsls	r3, r3, #23
 8001af2:	0011      	movs	r1, r2
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 fa9b 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001afa:	0021      	movs	r1, r4
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2208      	movs	r2, #8
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2202      	movs	r2, #2
 8001b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2203      	movs	r2, #3
 8001b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_SPI_MspInit+0xe0>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f000 fa85 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b00b      	add	sp, #44	; 0x2c
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_TIM_Base_MspInit+0x5c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0109      	lsls	r1, r1, #4
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	619a      	str	r2, [r3, #24]
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b6a:	e010      	b.n	8001b8e <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM6)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_TIM_Base_MspInit+0x64>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10b      	bne.n	8001b8e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b7c:	2110      	movs	r1, #16
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	61da      	str	r2, [r3, #28]
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_TIM_Base_MspInit+0x60>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2210      	movs	r2, #16
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40001000 	.word	0x40001000

08001ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	240c      	movs	r4, #12
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	2314      	movs	r3, #20
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f003 f880 	bl	8004cbc <memset>
  if(htim->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIM_MspPostInit+0x78>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d125      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_TIM_MspPostInit+0x7c>)
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_TIM_MspPostInit+0x7c>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0289      	lsls	r1, r1, #10
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_TIM_MspPostInit+0x7c>)
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	029b      	lsls	r3, r3, #10
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0052      	lsls	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	0021      	movs	r1, r4
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	2202      	movs	r2, #2
 8001bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2202      	movs	r2, #2
 8001c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	187a      	adds	r2, r7, r1
 8001c06:	2390      	movs	r3, #144	; 0x90
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fa0f 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b009      	add	sp, #36	; 0x24
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08b      	sub	sp, #44	; 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	2414      	movs	r4, #20
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	0018      	movs	r0, r3
 8001c32:	2314      	movs	r3, #20
 8001c34:	001a      	movs	r2, r3
 8001c36:	2100      	movs	r1, #0
 8001c38:	f003 f840 	bl	8004cbc <memset>
  if(huart->Instance==USART2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d132      	bne.n	8001cac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0289      	lsls	r1, r1, #10
 8001c50:	430a      	orrs	r2, r1
 8001c52:	61da      	str	r2, [r3, #28]
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0289      	lsls	r1, r1, #10
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c7e:	0021      	movs	r1, r4
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2202      	movs	r2, #2
 8001c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	187a      	adds	r2, r7, r1
 8001ca0:	2390      	movs	r3, #144	; 0x90
 8001ca2:	05db      	lsls	r3, r3, #23
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 f9c2 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b00b      	add	sp, #44	; 0x2c
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	40004400 	.word	0x40004400
 8001cb8:	40021000 	.word	0x40021000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f000 f8b2 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f002 ffd6 	bl	8004ccc <__errno>
 8001d20:	0003      	movs	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	425b      	negs	r3, r3
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	18d2      	adds	r2, r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b006      	add	sp, #24
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20004000 	.word	0x20004000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000208 	.word	0x20000208
 8001d54:	20000358 	.word	0x20000358

08001d58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d68:	f7ff fff6 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d92:	f002 ffa1 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d96:	f7ff fa43 	bl	8001220 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001da8:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 8001dac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001db0:	20000358 	.word	0x20000358

08001db4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_COMP_IRQHandler>
	...

08001db8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_Init+0x24>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_Init+0x24>)
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f809 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dce:	f7ff fe1f 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_InitTick+0x5c>)
 8001dea:	681c      	ldr	r4, [r3, #0]
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_InitTick+0x60>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	0019      	movs	r1, r3
 8001df2:	23fa      	movs	r3, #250	; 0xfa
 8001df4:	0098      	lsls	r0, r3, #2
 8001df6:	f7fe f991 	bl	800011c <__udivsi3>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0020      	movs	r0, r4
 8001e00:	f7fe f98c 	bl	800011c <__udivsi3>
 8001e04:	0003      	movs	r3, r0
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 f905 	bl	8002016 <HAL_SYSTICK_Config>
 8001e0c:	1e03      	subs	r3, r0, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e00f      	b.n	8001e34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d80b      	bhi.n	8001e32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	425b      	negs	r3, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f8e2 	bl	8001fec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_InitTick+0x64>)
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b003      	add	sp, #12
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000010 	.word	0x20000010
 8001e44:	2000000c 	.word	0x2000000c

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	001a      	movs	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	18d2      	adds	r2, r2, r3
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_IncTick+0x20>)
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000010 	.word	0x20000010
 8001e68:	2000020c 	.word	0x2000020c

08001e6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	2000020c 	.word	0x2000020c

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	f7ff ffe0 	bl	8001e6c <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	20000010 	.word	0x20000010

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	; 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	; 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ffbf 	bl	8001fa4 <SysTick_Config>
 8002026:	0003      	movs	r3, r0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e155      	b.n	80022ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4091      	lsls	r1, r2
 800204a:	000a      	movs	r2, r1
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d100      	bne.n	8002058 <HAL_GPIO_Init+0x28>
 8002056:	e146      	b.n	80022e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2203      	movs	r2, #3
 800205e:	4013      	ands	r3, r2
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	43da      	mvns	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	0013      	movs	r3, r2
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	2201      	movs	r2, #1
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	4013      	ands	r3, r2
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d017      	beq.n	800210e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	43da      	mvns	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d123      	bne.n	8002162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	58d3      	ldr	r3, [r2, r3]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2207      	movs	r2, #7
 800212c:	4013      	ands	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	43da      	mvns	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2107      	movs	r1, #7
 8002146:	400b      	ands	r3, r1
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	409a      	lsls	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	6939      	ldr	r1, [r7, #16]
 8002160:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	43da      	mvns	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	401a      	ands	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	23c0      	movs	r3, #192	; 0xc0
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	4013      	ands	r3, r2
 80021a0:	d100      	bne.n	80021a4 <HAL_GPIO_Init+0x174>
 80021a2:	e0a0      	b.n	80022e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_GPIO_Init+0x2d4>)
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_GPIO_Init+0x2d4>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	4b54      	ldr	r3, [pc, #336]	; (8002304 <HAL_GPIO_Init+0x2d4>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_GPIO_Init+0x2d8>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	589b      	ldr	r3, [r3, r2]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4013      	ands	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0013      	movs	r3, r2
 80021d8:	43da      	mvns	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	2390      	movs	r3, #144	; 0x90
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x1ee>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2dc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x1ea>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_GPIO_Init+0x2e0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x1e6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a45      	ldr	r2, [pc, #276]	; (8002314 <HAL_GPIO_Init+0x2e4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x1e2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a44      	ldr	r2, [pc, #272]	; (8002318 <HAL_GPIO_Init+0x2e8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x1de>
 800220a:	2304      	movs	r3, #4
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x1f0>
 800220e:	2305      	movs	r3, #5
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x1f0>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x1f0>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x1f0>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x1f0>
 800221e:	2300      	movs	r3, #0
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	2103      	movs	r1, #3
 8002224:	400a      	ands	r2, r1
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	; (8002308 <HAL_GPIO_Init+0x2d8>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_GPIO_Init+0x2ec>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43da      	mvns	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	035b      	lsls	r3, r3, #13
 8002256:	4013      	ands	r3, r2
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_GPIO_Init+0x2ec>)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_GPIO_Init+0x2ec>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43da      	mvns	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	039b      	lsls	r3, r3, #14
 8002280:	4013      	ands	r3, r2
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x2ec>)
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_GPIO_Init+0x2ec>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	4013      	ands	r3, r2
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_GPIO_Init+0x2ec>)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_GPIO_Init+0x2ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43da      	mvns	r2, r3
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	4013      	ands	r3, r2
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_GPIO_Init+0x2ec>)
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	1e13      	subs	r3, r2, #0
 80022f6:	d000      	beq.n	80022fa <HAL_GPIO_Init+0x2ca>
 80022f8:	e6a2      	b.n	8002040 <HAL_GPIO_Init+0x10>
  } 
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b006      	add	sp, #24
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48001000 	.word	0x48001000
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	000a      	movs	r2, r1
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	1cba      	adds	r2, r7, #2
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	4013      	ands	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e003      	b.n	800234c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002344:	230f      	movs	r3, #15
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800234c:	230f      	movs	r3, #15
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
  }
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	0008      	movs	r0, r1
 8002364:	0011      	movs	r1, r2
 8002366:	1cbb      	adds	r3, r7, #2
 8002368:	1c02      	adds	r2, r0, #0
 800236a:	801a      	strh	r2, [r3, #0]
 800236c:	1c7b      	adds	r3, r7, #1
 800236e:	1c0a      	adds	r2, r1, #0
 8002370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002372:	1c7b      	adds	r3, r7, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237a:	1cbb      	adds	r3, r7, #2
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002382:	e003      	b.n	800238c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002384:	1cbb      	adds	r3, r7, #2
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f000 fb76 	bl	8002a94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d100      	bne.n	80023b4 <HAL_RCC_OscConfig+0x20>
 80023b2:	e08e      	b.n	80024d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b4:	4bc5      	ldr	r3, [pc, #788]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	220c      	movs	r2, #12
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d00e      	beq.n	80023de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c0:	4bc2      	ldr	r3, [pc, #776]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	220c      	movs	r2, #12
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d117      	bne.n	80023fc <HAL_RCC_OscConfig+0x68>
 80023cc:	4bbf      	ldr	r3, [pc, #764]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	401a      	ands	r2, r3
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10e      	bne.n	80023fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023de:	4bbb      	ldr	r3, [pc, #748]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d100      	bne.n	80023ec <HAL_RCC_OscConfig+0x58>
 80023ea:	e071      	b.n	80024d0 <HAL_RCC_OscConfig+0x13c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d000      	beq.n	80023f6 <HAL_RCC_OscConfig+0x62>
 80023f4:	e06c      	b.n	80024d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f000 fb4c 	bl	8002a94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x80>
 8002404:	4bb1      	ldr	r3, [pc, #708]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4bb0      	ldr	r3, [pc, #704]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0249      	lsls	r1, r1, #9
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e02f      	b.n	8002474 <HAL_RCC_OscConfig+0xe0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0xa2>
 800241c:	4bab      	ldr	r3, [pc, #684]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4baa      	ldr	r3, [pc, #680]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002422:	49ab      	ldr	r1, [pc, #684]	; (80026d0 <HAL_RCC_OscConfig+0x33c>)
 8002424:	400a      	ands	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	4ba8      	ldr	r3, [pc, #672]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4ba7      	ldr	r3, [pc, #668]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800242e:	49a9      	ldr	r1, [pc, #676]	; (80026d4 <HAL_RCC_OscConfig+0x340>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e01e      	b.n	8002474 <HAL_RCC_OscConfig+0xe0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d10e      	bne.n	800245c <HAL_RCC_OscConfig+0xc8>
 800243e:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4ba2      	ldr	r3, [pc, #648]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	02c9      	lsls	r1, r1, #11
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4b9f      	ldr	r3, [pc, #636]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0249      	lsls	r1, r1, #9
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xe0>
 800245c:	4b9b      	ldr	r3, [pc, #620]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b9a      	ldr	r3, [pc, #616]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002462:	499b      	ldr	r1, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x33c>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4b98      	ldr	r3, [pc, #608]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b97      	ldr	r3, [pc, #604]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800246e:	4999      	ldr	r1, [pc, #612]	; (80026d4 <HAL_RCC_OscConfig+0x340>)
 8002470:	400a      	ands	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d014      	beq.n	80024a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fcf6 	bl	8001e6c <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002486:	f7ff fcf1 	bl	8001e6c <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e2fd      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0xf2>
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fce1 	bl	8001e6c <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fcdc 	bl	8001e6c <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e2e8      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	4013      	ands	r3, r2
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x11c>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x14a>
 80024dc:	e06c      	b.n	80025b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024de:	4b7b      	ldr	r3, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	220c      	movs	r2, #12
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e8:	4b78      	ldr	r3, [pc, #480]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11f      	bne.n	8002534 <HAL_RCC_OscConfig+0x1a0>
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	401a      	ands	r2, r3
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	429a      	cmp	r2, r3
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b71      	ldr	r3, [pc, #452]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x188>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e2bb      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b6b      	ldr	r3, [pc, #428]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	22f8      	movs	r2, #248	; 0xf8
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00da      	lsls	r2, r3, #3
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e041      	b.n	80025b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d024      	beq.n	8002586 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b62      	ldr	r3, [pc, #392]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fc90 	bl	8001e6c <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff fc8b 	bl	8001e6c <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e297      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d0f1      	beq.n	8002552 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	22f8      	movs	r2, #248	; 0xf8
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00da      	lsls	r2, r3, #3
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b51      	ldr	r3, [pc, #324]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fc6b 	bl	8001e6c <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fc66 	bl	8001e6c <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e272      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2208      	movs	r2, #8
 80025be:	4013      	ands	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d019      	beq.n	80025fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80025cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff fc49 	bl	8001e6c <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff fc44 	bl	8001e6c <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e250      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2202      	movs	r2, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d0f1      	beq.n	80025e0 <HAL_RCC_OscConfig+0x24c>
 80025fc:	e018      	b.n	8002630 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	4b33      	ldr	r3, [pc, #204]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002604:	2101      	movs	r1, #1
 8002606:	438a      	bics	r2, r1
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7ff fc2f 	bl	8001e6c <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fc2a 	bl	8001e6c <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e236      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d1f1      	bne.n	8002614 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	4013      	ands	r3, r2
 8002638:	d100      	bne.n	800263c <HAL_RCC_OscConfig+0x2a8>
 800263a:	e0b5      	b.n	80027a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263c:	201f      	movs	r0, #31
 800263e:	183b      	adds	r3, r7, r0
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	4013      	ands	r3, r2
 800264e:	d110      	bne.n	8002672 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0549      	lsls	r1, r1, #21
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	055b      	lsls	r3, r3, #21
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800266c:	183b      	adds	r3, r7, r0
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x344>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4013      	ands	r3, r2
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_RCC_OscConfig+0x344>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x344>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0049      	lsls	r1, r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268c:	f7ff fbee 	bl	8001e6c <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff fbe9 	bl	8001e6c <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1f5      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x344>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10f      	bne.n	80026dc <HAL_RCC_OscConfig+0x348>
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_OscConfig+0x338>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e036      	b.n	8002738 <HAL_RCC_OscConfig+0x3a4>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40021000 	.word	0x40021000
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	fffbffff 	.word	0xfffbffff
 80026d8:	40007000 	.word	0x40007000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x36a>
 80026e4:	4bca      	ldr	r3, [pc, #808]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4bc9      	ldr	r3, [pc, #804]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	438a      	bics	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	4bc7      	ldr	r3, [pc, #796]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	4bc6      	ldr	r3, [pc, #792]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80026f6:	2104      	movs	r1, #4
 80026f8:	438a      	bics	r2, r1
 80026fa:	621a      	str	r2, [r3, #32]
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x3a4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x38c>
 8002706:	4bc2      	ldr	r3, [pc, #776]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	4bc1      	ldr	r3, [pc, #772]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800270c:	2104      	movs	r1, #4
 800270e:	430a      	orrs	r2, r1
 8002710:	621a      	str	r2, [r3, #32]
 8002712:	4bbf      	ldr	r3, [pc, #764]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	4bbe      	ldr	r3, [pc, #760]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	621a      	str	r2, [r3, #32]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x3a4>
 8002720:	4bbb      	ldr	r3, [pc, #748]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4bba      	ldr	r3, [pc, #744]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	4bb8      	ldr	r3, [pc, #736]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4bb7      	ldr	r3, [pc, #732]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002732:	2104      	movs	r1, #4
 8002734:	438a      	bics	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d014      	beq.n	800276a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7ff fb94 	bl	8001e6c <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e009      	b.n	800275e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff fb8f 	bl	8001e6c <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4aaf      	ldr	r2, [pc, #700]	; (8002a14 <HAL_RCC_OscConfig+0x680>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e19a      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4bac      	ldr	r3, [pc, #688]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x3b6>
 8002768:	e013      	b.n	8002792 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fb7f 	bl	8001e6c <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e009      	b.n	8002788 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff fb7a 	bl	8001e6c <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	4aa5      	ldr	r2, [pc, #660]	; (8002a14 <HAL_RCC_OscConfig+0x680>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e185      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002792:	231f      	movs	r3, #31
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b9c      	ldr	r3, [pc, #624]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	4b9b      	ldr	r3, [pc, #620]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	499d      	ldr	r1, [pc, #628]	; (8002a18 <HAL_RCC_OscConfig+0x684>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2210      	movs	r2, #16
 80027ae:	4013      	ands	r3, r2
 80027b0:	d063      	beq.n	800287a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12a      	bne.n	8002810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ba:	4b95      	ldr	r3, [pc, #596]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	4b94      	ldr	r3, [pc, #592]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027c6:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	4b91      	ldr	r3, [pc, #580]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fb4b 	bl	8001e6c <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027dc:	f7ff fb46 	bl	8001e6c <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e152      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0f1      	beq.n	80027dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027f8:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	22f8      	movs	r2, #248	; 0xf8
 80027fe:	4393      	bics	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	00da      	lsls	r2, r3, #3
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800280a:	430a      	orrs	r2, r1
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
 800280e:	e034      	b.n	800287a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	3305      	adds	r3, #5
 8002816:	d111      	bne.n	800283c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002818:	4b7d      	ldr	r3, [pc, #500]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800281a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281c:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800281e:	2104      	movs	r1, #4
 8002820:	438a      	bics	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002824:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	22f8      	movs	r2, #248	; 0xf8
 800282a:	4393      	bics	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002836:	430a      	orrs	r2, r1
 8002838:	635a      	str	r2, [r3, #52]	; 0x34
 800283a:	e01e      	b.n	800287a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800283c:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002842:	2104      	movs	r1, #4
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002848:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800284a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284c:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff fb0a 	bl	8001e6c <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800285e:	f7ff fb05 	bl	8001e6c <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e111      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002870:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d1f1      	bne.n	800285e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	4013      	ands	r3, r2
 8002882:	d05c      	beq.n	800293e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002884:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	220c      	movs	r2, #12
 800288a:	4013      	ands	r3, r2
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d00e      	beq.n	80028ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002890:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	220c      	movs	r2, #12
 8002896:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002898:	2b08      	cmp	r3, #8
 800289a:	d114      	bne.n	80028c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	401a      	ands	r2, r3
 80028a6:	23c0      	movs	r3, #192	; 0xc0
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d10b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	4013      	ands	r3, r2
 80028b8:	d040      	beq.n	800293c <HAL_RCC_OscConfig+0x5a8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d03c      	beq.n	800293c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e6      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01b      	beq.n	8002906 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0249      	lsls	r1, r1, #9
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff fac6 	bl	8001e6c <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e6:	f7ff fac1 	bl	8001e6c <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0cd      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80028fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	4013      	ands	r3, r2
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x552>
 8002904:	e01b      	b.n	800293e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002906:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800290c:	4943      	ldr	r1, [pc, #268]	; (8002a1c <HAL_RCC_OscConfig+0x688>)
 800290e:	400a      	ands	r2, r1
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7ff faab 	bl	8001e6c <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291c:	f7ff faa6 	bl	8001e6c <HAL_GetTick>
 8002920:	0002      	movs	r2, r0
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0b2      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	029b      	lsls	r3, r3, #10
 8002936:	4013      	ands	r3, r2
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x588>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800293c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d100      	bne.n	8002948 <HAL_RCC_OscConfig+0x5b4>
 8002946:	e0a4      	b.n	8002a92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	220c      	movs	r2, #12
 800294e:	4013      	ands	r3, r2
 8002950:	2b08      	cmp	r3, #8
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x5c2>
 8002954:	e078      	b.n	8002a48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b02      	cmp	r3, #2
 800295c:	d14c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002964:	492e      	ldr	r1, [pc, #184]	; (8002a20 <HAL_RCC_OscConfig+0x68c>)
 8002966:	400a      	ands	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7ff fa7f 	bl	8001e6c <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fa7a 	bl	8001e6c <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e086      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	049b      	lsls	r3, r3, #18
 800298e:	4013      	ands	r3, r2
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	220f      	movs	r2, #15
 8002998:	4393      	bics	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_RCC_OscConfig+0x690>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	431a      	orrs	r2, r3
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	0449      	lsls	r1, r1, #17
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7ff fa4d 	bl	8001e6c <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff fa48 	bl	8001e6c <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e054      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x644>
 80029f6:	e04c      	b.n	8002a92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <HAL_RCC_OscConfig+0x68c>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fa32 	bl	8001e6c <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x6a6>
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	00001388 	.word	0x00001388
 8002a18:	efffffff 	.word	0xefffffff
 8002a1c:	fffeffff 	.word	0xfffeffff
 8002a20:	feffffff 	.word	0xfeffffff
 8002a24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff fa20 	bl	8001e6c <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e02c      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x708>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	049b      	lsls	r3, r3, #18
 8002a42:	4013      	ands	r3, r2
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x694>
 8002a46:	e024      	b.n	8002a92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e01f      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_OscConfig+0x708>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCC_OscConfig+0x708>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	025b      	lsls	r3, r3, #9
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10e      	bne.n	8002a8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	220f      	movs	r2, #15
 8002a74:	401a      	ands	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	23f0      	movs	r3, #240	; 0xf0
 8002a82:	039b      	lsls	r3, r3, #14
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b008      	add	sp, #32
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0bf      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d911      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b5e      	ldr	r3, [pc, #376]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4393      	bics	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a6      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d015      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2204      	movs	r2, #4
 8002af6:	4013      	ands	r3, r2
 8002af8:	d006      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002afa:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b00:	21e0      	movs	r1, #224	; 0xe0
 8002b02:	00c9      	lsls	r1, r1, #3
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	22f0      	movs	r2, #240	; 0xf0
 8002b0e:	4393      	bics	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	d04c      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d120      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	049b      	lsls	r3, r3, #18
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d114      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	029b      	lsls	r3, r3, #10
 8002b66:	4013      	ands	r3, r2
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e062      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e05b      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4393      	bics	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7ff f96c 	bl	8001e6c <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b98:	e009      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7ff f967 	bl	8001e6c <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x1a4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e042      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1ec      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d211      	bcs.n	8002bf2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x19c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e020      	b.n	8002c34 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_RCC_ClockConfig+0x1a8>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c10:	f000 f820 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c14:	0001      	movs	r1, r0
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	4013      	ands	r3, r2
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1ac>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	000a      	movs	r2, r1
 8002c26:	40da      	lsrs	r2, r3
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff f8d7 	bl	8001de0 <HAL_InitTick>
  
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b004      	add	sp, #16
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	00001388 	.word	0x00001388
 8002c48:	fffff8ff 	.word	0xfffff8ff
 8002c4c:	080069bc 	.word	0x080069bc
 8002c50:	20000008 	.word	0x20000008

08002c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	220c      	movs	r2, #12
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d046      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb8>
 8002c7e:	d848      	bhi.n	8002d12 <HAL_RCC_GetSysClockFreq+0xbe>
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d002      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x36>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c88:	e043      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c8c:	613b      	str	r3, [r7, #16]
      break;
 8002c8e:	e043      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	220f      	movs	r2, #15
 8002c96:	4013      	ands	r3, r2
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	23c0      	movs	r3, #192	; 0xc0
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	481a      	ldr	r0, [pc, #104]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cc0:	f7fd fa2c 	bl	800011c <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4353      	muls	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e01a      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	23c0      	movs	r3, #192	; 0xc0
 8002cd4:	025b      	lsls	r3, r3, #9
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	4814      	ldr	r0, [pc, #80]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002ce4:	f7fd fa1a 	bl	800011c <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4353      	muls	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cf8:	f7fd fa10 	bl	800011c <__udivsi3>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	001a      	movs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4353      	muls	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	613b      	str	r3, [r7, #16]
      break;
 8002d0a:	e005      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e002      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d18:	693b      	ldr	r3, [r7, #16]
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40021000 	.word	0x40021000
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	080069d4 	.word	0x080069d4
 8002d30:	080069e4 	.word	0x080069e4
 8002d34:	02dc6c00 	.word	0x02dc6c00

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000008 	.word	0x20000008

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d50:	f7ff fff2 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d54:	0001      	movs	r1, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	4013      	ands	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	40d9      	lsrs	r1, r3
 8002d66:	000b      	movs	r3, r1
}    
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	40021000 	.word	0x40021000
 8002d74:	080069cc 	.word	0x080069cc

08002d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	4013      	ands	r3, r2
 8002d92:	d100      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d94:	e08e      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2017      	movs	r0, #23
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b6e      	ldr	r3, [pc, #440]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	055b      	lsls	r3, r3, #21
 8002da6:	4013      	ands	r3, r2
 8002da8:	d110      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0549      	lsls	r1, r1, #21
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
 8002db8:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	055b      	lsls	r3, r3, #21
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d11a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd8:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	0049      	lsls	r1, r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f841 	bl	8001e6c <HAL_GetTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	e008      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7ff f83c 	bl	8001e6c <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0a6      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e0e:	4b52      	ldr	r3, [pc, #328]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	23c0      	movs	r3, #192	; 0xc0
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d034      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d02c      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e30:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0249      	lsls	r1, r1, #9
 8002e44:	430a      	orrs	r2, r1
 8002e46:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e48:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e4e:	4945      	ldr	r1, [pc, #276]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e54:	4b40      	ldr	r3, [pc, #256]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7ff f803 	bl	8001e6c <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e009      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fffe 	bl	8001e6c <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e067      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e9e:	2317      	movs	r3, #23
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eae:	492f      	ldr	r1, [pc, #188]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2210      	movs	r2, #16
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4013      	ands	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	4393      	bics	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	4393      	bics	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	fffffcff 	.word	0xfffffcff
 8002f64:	fffeffff 	.word	0xfffeffff
 8002f68:	00001388 	.word	0x00001388
 8002f6c:	efffffff 	.word	0xefffffff
 8002f70:	fffcffff 	.word	0xfffcffff

08002f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0a8      	b.n	80030d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2382      	movs	r3, #130	; 0x82
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d009      	beq.n	8002fae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]
 8002fa0:	e005      	b.n	8002fae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	225d      	movs	r2, #93	; 0x5d
 8002fb8:	5c9b      	ldrb	r3, [r3, r2]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	225c      	movs	r2, #92	; 0x5c
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7fe fd44 	bl	8001a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	225d      	movs	r2, #93	; 0x5d
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	23e0      	movs	r3, #224	; 0xe0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e002      	b.n	8003000 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	23f0      	movs	r3, #240	; 0xf0
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	429a      	cmp	r2, r3
 800300a:	d008      	beq.n	800301e <HAL_SPI_Init+0xaa>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	23e0      	movs	r3, #224	; 0xe0
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	429a      	cmp	r2, r3
 8003016:	d002      	beq.n	800301e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	2382      	movs	r3, #130	; 0x82
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	401a      	ands	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	2384      	movs	r3, #132	; 0x84
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	400b      	ands	r3, r1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2102      	movs	r1, #2
 800303a:	400b      	ands	r3, r1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2101      	movs	r1, #1
 8003044:	400b      	ands	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	400b      	ands	r3, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2138      	movs	r1, #56	; 0x38
 800305a:	400b      	ands	r3, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	400b      	ands	r3, r1
 8003066:	431a      	orrs	r2, r3
 8003068:	0011      	movs	r1, r2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	2204      	movs	r2, #4
 8003084:	401a      	ands	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2110      	movs	r1, #16
 800308c:	400b      	ands	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	2108      	movs	r1, #8
 8003096:	400b      	ands	r3, r1
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68d9      	ldr	r1, [r3, #12]
 800309e:	23f0      	movs	r3, #240	; 0xf0
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	0011      	movs	r1, r2
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4907      	ldr	r1, [pc, #28]	; (80030e0 <HAL_SPI_Init+0x16c>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	225d      	movs	r2, #93	; 0x5d
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	fffff7ff 	.word	0xfffff7ff

080030e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f4:	231f      	movs	r3, #31
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	225c      	movs	r2, #92	; 0x5c
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_SPI_Transmit+0x26>
 8003106:	2302      	movs	r3, #2
 8003108:	e147      	b.n	800339a <HAL_SPI_Transmit+0x2b6>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	225c      	movs	r2, #92	; 0x5c
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003112:	f7fe feab 	bl	8001e6c <HAL_GetTick>
 8003116:	0003      	movs	r3, r0
 8003118:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800311a:	2316      	movs	r3, #22
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	1dba      	adds	r2, r7, #6
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	225d      	movs	r2, #93	; 0x5d
 8003128:	5c9b      	ldrb	r3, [r3, r2]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d004      	beq.n	800313a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003130:	231f      	movs	r3, #31
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
    goto error;
 8003138:	e128      	b.n	800338c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_SPI_Transmit+0x64>
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003150:	e11c      	b.n	800338c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	225d      	movs	r2, #93	; 0x5d
 8003156:	2103      	movs	r1, #3
 8003158:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1dba      	adds	r2, r7, #6
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1dba      	adds	r2, r7, #6
 8003172:	8812      	ldrh	r2, [r2, #0]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2244      	movs	r2, #68	; 0x44
 8003180:	2100      	movs	r1, #0
 8003182:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2246      	movs	r2, #70	; 0x46
 8003188:	2100      	movs	r1, #0
 800318a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d110      	bne.n	80031c6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	438a      	bics	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	01c9      	lsls	r1, r1, #7
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d007      	beq.n	80031e4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	23e0      	movs	r3, #224	; 0xe0
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d952      	bls.n	8003296 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_SPI_Transmit+0x11e>
 80031f8:	2316      	movs	r3, #22
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d143      	bne.n	800328a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	881a      	ldrh	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003226:	e030      	b.n	800328a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d112      	bne.n	800325c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325a:	e016      	b.n	800328a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325c:	f7fe fe06 	bl	8001e6c <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d802      	bhi.n	8003272 <HAL_SPI_Transmit+0x18e>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_SPI_Transmit+0x194>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2203      	movs	r2, #3
 800327e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	225d      	movs	r2, #93	; 0x5d
 8003284:	2101      	movs	r1, #1
 8003286:	5499      	strb	r1, [r3, r2]
          goto error;
 8003288:	e080      	b.n	800338c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1c9      	bne.n	8003228 <HAL_SPI_Transmit+0x144>
 8003294:	e053      	b.n	800333e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_SPI_Transmit+0x1c4>
 800329e:	2316      	movs	r3, #22
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d145      	bne.n	8003334 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80032ce:	e031      	b.n	8003334 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2202      	movs	r2, #2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d113      	bne.n	8003306 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003304:	e016      	b.n	8003334 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003306:	f7fe fdb1 	bl	8001e6c <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d802      	bhi.n	800331c <HAL_SPI_Transmit+0x238>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_SPI_Transmit+0x23e>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003322:	231f      	movs	r3, #31
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	225d      	movs	r2, #93	; 0x5d
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
          goto error;
 8003332:	e02b      	b.n	800338c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1c8      	bne.n	80032d0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	6839      	ldr	r1, [r7, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f95d 	bl	8003604 <SPI_EndRxTxTransaction>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800337a:	231f      	movs	r3, #31
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e003      	b.n	800338c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	225d      	movs	r2, #93	; 0x5d
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	225c      	movs	r2, #92	; 0x5c
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003394:	231f      	movs	r3, #31
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	781b      	ldrb	r3, [r3, #0]
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b008      	add	sp, #32
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033b4:	f7fe fd5a 	bl	8001e6c <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033c4:	f7fe fd52 	bl	8001e6c <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033cc:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	015b      	lsls	r3, r3, #5
 80033d2:	0d1b      	lsrs	r3, r3, #20
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	4353      	muls	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	e058      	b.n	800348e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	d055      	beq.n	800348e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033e2:	f7fe fd43 	bl	8001e6c <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d902      	bls.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d142      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	21e0      	movs	r1, #224	; 0xe0
 8003404:	438a      	bics	r2, r1
 8003406:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	2382      	movs	r3, #130	; 0x82
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	429a      	cmp	r2, r3
 8003412:	d113      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	429a      	cmp	r2, r3
 800341e:	d005      	beq.n	800342c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2140      	movs	r1, #64	; 0x40
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	429a      	cmp	r2, r3
 8003446:	d110      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	491a      	ldr	r1, [pc, #104]	; (80034bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003454:	400a      	ands	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	0189      	lsls	r1, r1, #6
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	225d      	movs	r2, #93	; 0x5d
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	225c      	movs	r2, #92	; 0x5c
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e017      	b.n	80034ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3b01      	subs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	425a      	negs	r2, r3
 800349e:	4153      	adcs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	001a      	movs	r2, r3
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d197      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b008      	add	sp, #32
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	20000008 	.word	0x20000008
 80034bc:	ffffdfff 	.word	0xffffdfff

080034c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ce:	2317      	movs	r3, #23
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034d6:	f7fe fcc9 	bl	8001e6c <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	18d3      	adds	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034e6:	f7fe fcc1 	bl	8001e6c <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	0013      	movs	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	00da      	lsls	r2, r3, #3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	0d1b      	lsrs	r3, r3, #20
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4353      	muls	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800350c:	e068      	b.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	429a      	cmp	r2, r3
 8003516:	d10a      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	2117      	movs	r1, #23
 8003526:	187b      	adds	r3, r7, r1
 8003528:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800352a:	187b      	adds	r3, r7, r1
 800352c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	d055      	beq.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003534:	f7fe fc9a 	bl	8001e6c <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d142      	bne.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	21e0      	movs	r1, #224	; 0xe0
 8003556:	438a      	bics	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	2382      	movs	r3, #130	; 0x82
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	429a      	cmp	r2, r3
 8003564:	d113      	bne.n	800358e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	429a      	cmp	r2, r3
 8003570:	d005      	beq.n	800357e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	438a      	bics	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	429a      	cmp	r2, r3
 8003598:	d110      	bne.n	80035bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0189      	lsls	r1, r1, #6
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	225d      	movs	r2, #93	; 0x5d
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	225c      	movs	r2, #92	; 0x5c
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e010      	b.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3b01      	subs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d18e      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00a      	add	sp, #40	; 0x28
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000008 	.word	0x20000008
 8003600:	ffffdfff 	.word	0xffffdfff

08003604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	23c0      	movs	r3, #192	; 0xc0
 8003614:	0159      	lsls	r1, r3, #5
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	0013      	movs	r3, r2
 800361e:	2200      	movs	r2, #0
 8003620:	f7ff ff4e 	bl	80034c0 <SPI_WaitFifoStateUntilTimeout>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d007      	beq.n	8003638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362c:	2220      	movs	r2, #32
 800362e:	431a      	orrs	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e027      	b.n	8003688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0013      	movs	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	f7ff fead 	bl	80033a4 <SPI_WaitFlagStateUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d007      	beq.n	800365e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	2220      	movs	r2, #32
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e014      	b.n	8003688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	23c0      	movs	r3, #192	; 0xc0
 8003662:	00d9      	lsls	r1, r3, #3
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	0013      	movs	r3, r2
 800366c:	2200      	movs	r2, #0
 800366e:	f7ff ff27 	bl	80034c0 <SPI_WaitFifoStateUntilTimeout>
 8003672:	1e03      	subs	r3, r0, #0
 8003674:	d007      	beq.n	8003686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	2220      	movs	r2, #32
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e000      	b.n	8003688 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e042      	b.n	8003728 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223d      	movs	r2, #61	; 0x3d
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	223c      	movs	r2, #60	; 0x3c
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7fe fa3f 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223d      	movs	r2, #61	; 0x3d
 80036c2:	2102      	movs	r1, #2
 80036c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	0019      	movs	r1, r3
 80036d0:	0010      	movs	r0, r2
 80036d2:	f000 fad7 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2246      	movs	r2, #70	; 0x46
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	223e      	movs	r2, #62	; 0x3e
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223f      	movs	r2, #63	; 0x3f
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2241      	movs	r2, #65	; 0x41
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2242      	movs	r2, #66	; 0x42
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2243      	movs	r2, #67	; 0x43
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2244      	movs	r2, #68	; 0x44
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2245      	movs	r2, #69	; 0x45
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	223d      	movs	r2, #61	; 0x3d
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e042      	b.n	80037c8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	; 0x3d
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	223c      	movs	r2, #60	; 0x3c
 8003752:	2100      	movs	r1, #0
 8003754:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f839 	bl	80037d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	223d      	movs	r2, #61	; 0x3d
 8003762:	2102      	movs	r1, #2
 8003764:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	0019      	movs	r1, r3
 8003770:	0010      	movs	r0, r2
 8003772:	f000 fa87 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2246      	movs	r2, #70	; 0x46
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	223e      	movs	r2, #62	; 0x3e
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	223f      	movs	r2, #63	; 0x3f
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2241      	movs	r2, #65	; 0x41
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2242      	movs	r2, #66	; 0x42
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2243      	movs	r2, #67	; 0x43
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2244      	movs	r2, #68	; 0x44
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2245      	movs	r2, #69	; 0x45
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223d      	movs	r2, #61	; 0x3d
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <HAL_TIM_PWM_Start+0x22>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223e      	movs	r2, #62	; 0x3e
 80037f4:	5c9b      	ldrb	r3, [r3, r2]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	1e5a      	subs	r2, r3, #1
 80037fc:	4193      	sbcs	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e01f      	b.n	8003842 <HAL_TIM_PWM_Start+0x62>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d108      	bne.n	800381a <HAL_TIM_PWM_Start+0x3a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	223f      	movs	r2, #63	; 0x3f
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	4193      	sbcs	r3, r2
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e013      	b.n	8003842 <HAL_TIM_PWM_Start+0x62>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d108      	bne.n	8003832 <HAL_TIM_PWM_Start+0x52>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	4193      	sbcs	r3, r2
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e007      	b.n	8003842 <HAL_TIM_PWM_Start+0x62>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2241      	movs	r2, #65	; 0x41
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	4193      	sbcs	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e074      	b.n	8003934 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0x7a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223e      	movs	r2, #62	; 0x3e
 8003854:	2102      	movs	r1, #2
 8003856:	5499      	strb	r1, [r3, r2]
 8003858:	e013      	b.n	8003882 <HAL_TIM_PWM_Start+0xa2>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0x8a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	223f      	movs	r2, #63	; 0x3f
 8003864:	2102      	movs	r1, #2
 8003866:	5499      	strb	r1, [r3, r2]
 8003868:	e00b      	b.n	8003882 <HAL_TIM_PWM_Start+0xa2>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start+0x9a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	2102      	movs	r1, #2
 8003876:	5499      	strb	r1, [r3, r2]
 8003878:	e003      	b.n	8003882 <HAL_TIM_PWM_Start+0xa2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2241      	movs	r2, #65	; 0x41
 800387e:	2102      	movs	r1, #2
 8003880:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fd10 	bl	80042b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_TIM_PWM_Start+0x15c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_PWM_Start+0xd8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_TIM_PWM_Start+0x160>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_PWM_Start+0xd8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <HAL_TIM_PWM_Start+0x164>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_PWM_Start+0xd8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_TIM_PWM_Start+0x168>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_PWM_Start+0xdc>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_TIM_PWM_Start+0xde>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0209      	lsls	r1, r1, #8
 80038d0:	430a      	orrs	r2, r1
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_TIM_PWM_Start+0x15c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <HAL_TIM_PWM_Start+0x11e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	05db      	lsls	r3, r3, #23
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d009      	beq.n	80038fe <HAL_TIM_PWM_Start+0x11e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_TIM_PWM_Start+0x16c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIM_PWM_Start+0x11e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <HAL_TIM_PWM_Start+0x160>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d111      	bne.n	8003922 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2207      	movs	r2, #7
 8003906:	4013      	ands	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b06      	cmp	r3, #6
 800390e:	d010      	beq.n	8003932 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	e007      	b.n	8003932 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	40000400 	.word	0x40000400

08003950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2317      	movs	r3, #23
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	223c      	movs	r2, #60	; 0x3c
 8003968:	5c9b      	ldrb	r3, [r3, r2]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x22>
 800396e:	2302      	movs	r3, #2
 8003970:	e0ad      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	223c      	movs	r2, #60	; 0x3c
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d100      	bne.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003980:	e076      	b.n	8003a70 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d900      	bls.n	800398a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003988:	e095      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d04e      	beq.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d900      	bls.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003996:	e08e      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d021      	beq.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80039a4:	e087      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f9e8 	bl	8003d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2108      	movs	r1, #8
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2104      	movs	r1, #4
 80039d0:	438a      	bics	r2, r1
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	619a      	str	r2, [r3, #24]
      break;
 80039e6:	e06b      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fa4f 	bl	8003e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0109      	lsls	r1, r1, #4
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4931      	ldr	r1, [pc, #196]	; (8003ad8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      break;
 8003a2c:	e048      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fab0 	bl	8003f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2108      	movs	r1, #8
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2104      	movs	r1, #4
 8003a58:	438a      	bics	r2, r1
 8003a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69d9      	ldr	r1, [r3, #28]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
      break;
 8003a6e:	e027      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	0011      	movs	r1, r2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fb15 	bl	80040a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	0109      	lsls	r1, r1, #4
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69d9      	ldr	r1, [r3, #28]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e004      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ab6:	2317      	movs	r3, #23
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
      break;
 8003abe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	223c      	movs	r2, #60	; 0x3c
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac8:	2317      	movs	r3, #23
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b006      	add	sp, #24
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	fffffbff 	.word	0xfffffbff

08003adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	230f      	movs	r3, #15
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	223c      	movs	r2, #60	; 0x3c
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x20>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0bc      	b.n	8003c76 <HAL_TIM_ConfigClockSource+0x19a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	223c      	movs	r2, #60	; 0x3c
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	223d      	movs	r2, #61	; 0x3d
 8003b08:	2102      	movs	r1, #2
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2277      	movs	r2, #119	; 0x77
 8003b18:	4393      	bics	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0192      	lsls	r2, r2, #6
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d040      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0xde>
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	0192      	lsls	r2, r2, #6
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d900      	bls.n	8003b42 <HAL_TIM_ConfigClockSource+0x66>
 8003b40:	e088      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0152      	lsls	r2, r2, #5
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d100      	bne.n	8003b4c <HAL_TIM_ConfigClockSource+0x70>
 8003b4a:	e088      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x182>
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	0152      	lsls	r2, r2, #5
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d900      	bls.n	8003b56 <HAL_TIM_ConfigClockSource+0x7a>
 8003b54:	e07e      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b56:	2b70      	cmp	r3, #112	; 0x70
 8003b58:	d018      	beq.n	8003b8c <HAL_TIM_ConfigClockSource+0xb0>
 8003b5a:	d900      	bls.n	8003b5e <HAL_TIM_ConfigClockSource+0x82>
 8003b5c:	e07a      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b5e:	2b60      	cmp	r3, #96	; 0x60
 8003b60:	d04f      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x126>
 8003b62:	d900      	bls.n	8003b66 <HAL_TIM_ConfigClockSource+0x8a>
 8003b64:	e076      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b66:	2b50      	cmp	r3, #80	; 0x50
 8003b68:	d03b      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x106>
 8003b6a:	d900      	bls.n	8003b6e <HAL_TIM_ConfigClockSource+0x92>
 8003b6c:	e072      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d057      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x146>
 8003b72:	d900      	bls.n	8003b76 <HAL_TIM_ConfigClockSource+0x9a>
 8003b74:	e06e      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b76:	2b30      	cmp	r3, #48	; 0x30
 8003b78:	d063      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x166>
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x166>
 8003b80:	d868      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d05d      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x166>
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d05b      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x166>
 8003b8a:	e063      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9c:	f000 fb68 	bl	8004270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2277      	movs	r2, #119	; 0x77
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
      break;
 8003bb8:	e052      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bca:	f000 fb51 	bl	8004270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	01c9      	lsls	r1, r1, #7
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03e      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	001a      	movs	r2, r3
 8003bf0:	f000 fac4 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	; 0x50
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 fb1e 	bl	800423c <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02e      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	001a      	movs	r2, r3
 8003c10:	f000 fae2 	bl	80041d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	; 0x60
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fb0e 	bl	800423c <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01e      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	001a      	movs	r2, r3
 8003c30:	f000 faa4 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fafe 	bl	800423c <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00e      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	f000 faf5 	bl	800423c <TIM_ITRx_SetConfig>
      break;
 8003c52:	e005      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c54:	230f      	movs	r3, #15
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c5e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	223d      	movs	r2, #61	; 0x3d
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	223c      	movs	r2, #60	; 0x3c
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	5499      	strb	r1, [r3, r2]

  return status;
 8003c70:	230f      	movs	r3, #15
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	781b      	ldrb	r3, [r3, #0]
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	ffff00ff 	.word	0xffff00ff

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a34      	ldr	r2, [pc, #208]	; (8003d68 <TIM_Base_SetConfig+0xe4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d008      	beq.n	8003cae <TIM_Base_SetConfig+0x2a>
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0x2a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <TIM_Base_SetConfig+0xe8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d108      	bne.n	8003cc0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2270      	movs	r2, #112	; 0x70
 8003cb2:	4393      	bics	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_Base_SetConfig+0xe4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	05db      	lsls	r3, r3, #23
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d013      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0xe8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <TIM_Base_SetConfig+0xec>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <TIM_Base_SetConfig+0xf0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <TIM_Base_SetConfig+0xf4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <TIM_Base_SetConfig+0xfc>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	4393      	bics	r3, r2
 8003d12:	001a      	movs	r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <TIM_Base_SetConfig+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0xce>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <TIM_Base_SetConfig+0xf0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0xce>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <TIM_Base_SetConfig+0xf4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0xce>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d103      	bne.n	8003d5a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	615a      	str	r2, [r3, #20]
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b004      	add	sp, #16
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40002000 	.word	0x40002000
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	fffffcff 	.word	0xfffffcff

08003d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4393      	bics	r3, r2
 8003d96:	001a      	movs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2270      	movs	r2, #112	; 0x70
 8003db2:	4393      	bics	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2203      	movs	r2, #3
 8003dba:	4393      	bics	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4393      	bics	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <TIM_OC1_SetConfig+0xf8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_OC1_SetConfig+0x76>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <TIM_OC1_SetConfig+0xfc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC1_SetConfig+0x76>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <TIM_OC1_SetConfig+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0x76>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <TIM_OC1_SetConfig+0x104>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10c      	bne.n	8003e14 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4393      	bics	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	4393      	bics	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <TIM_OC1_SetConfig+0xf8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_OC1_SetConfig+0xb0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <TIM_OC1_SetConfig+0xfc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_OC1_SetConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <TIM_OC1_SetConfig+0x100>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC1_SetConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <TIM_OC1_SetConfig+0x104>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d111      	bne.n	8003e58 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <TIM_OC1_SetConfig+0x108>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <TIM_OC1_SetConfig+0x10c>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b006      	add	sp, #24
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	fffffeff 	.word	0xfffffeff
 8003e90:	fffffdff 	.word	0xfffffdff

08003e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <TIM_OC2_SetConfig+0xe8>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <TIM_OC2_SetConfig+0xec>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2220      	movs	r2, #32
 8003ede:	4393      	bics	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <TIM_OC2_SetConfig+0xf0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	4393      	bics	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2240      	movs	r2, #64	; 0x40
 8003f0e:	4393      	bics	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <TIM_OC2_SetConfig+0xf0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_OC2_SetConfig+0x9e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <TIM_OC2_SetConfig+0xf4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_OC2_SetConfig+0x9e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <TIM_OC2_SetConfig+0xf8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_OC2_SetConfig+0x9e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <TIM_OC2_SetConfig+0xfc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <TIM_OC2_SetConfig+0x100>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <TIM_OC2_SetConfig+0x104>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b006      	add	sp, #24
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	ffff8fff 	.word	0xffff8fff
 8003f80:	fffffcff 	.word	0xfffffcff
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800
 8003f94:	fffffbff 	.word	0xfffffbff
 8003f98:	fffff7ff 	.word	0xfffff7ff

08003f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a35      	ldr	r2, [pc, #212]	; (8004080 <TIM_OC3_SetConfig+0xe4>)
 8003fac:	401a      	ands	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2270      	movs	r2, #112	; 0x70
 8003fc8:	4393      	bics	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	4393      	bics	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4a28      	ldr	r2, [pc, #160]	; (8004084 <TIM_OC3_SetConfig+0xe8>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a24      	ldr	r2, [pc, #144]	; (8004088 <TIM_OC3_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <TIM_OC3_SetConfig+0xf0>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <TIM_OC3_SetConfig+0xf4>)
 8004012:	4013      	ands	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <TIM_OC3_SetConfig+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_OC3_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <TIM_OC3_SetConfig+0xf8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_OC3_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <TIM_OC3_SetConfig+0xfc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1a      	ldr	r2, [pc, #104]	; (800409c <TIM_OC3_SetConfig+0x100>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_OC3_SetConfig+0x104>)
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_OC3_SetConfig+0x108>)
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b006      	add	sp, #24
 800407e:	bd80      	pop	{r7, pc}
 8004080:	fffffeff 	.word	0xfffffeff
 8004084:	fffffdff 	.word	0xfffffdff
 8004088:	40012c00 	.word	0x40012c00
 800408c:	fffff7ff 	.word	0xfffff7ff
 8004090:	fffffbff 	.word	0xfffffbff
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800
 80040a0:	ffffefff 	.word	0xffffefff
 80040a4:	ffffdfff 	.word	0xffffdfff

080040a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a28      	ldr	r2, [pc, #160]	; (8004158 <TIM_OC4_SetConfig+0xb0>)
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a22      	ldr	r2, [pc, #136]	; (800415c <TIM_OC4_SetConfig+0xb4>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a21      	ldr	r2, [pc, #132]	; (8004160 <TIM_OC4_SetConfig+0xb8>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <TIM_OC4_SetConfig+0xbc>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a19      	ldr	r2, [pc, #100]	; (8004168 <TIM_OC4_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_OC4_SetConfig+0x78>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a18      	ldr	r2, [pc, #96]	; (800416c <TIM_OC4_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_OC4_SetConfig+0x78>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <TIM_OC4_SetConfig+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC4_SetConfig+0x78>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <TIM_OC4_SetConfig+0xcc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <TIM_OC4_SetConfig+0xd0>)
 8004124:	4013      	ands	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b006      	add	sp, #24
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	ffffefff 	.word	0xffffefff
 800415c:	ffff8fff 	.word	0xffff8fff
 8004160:	fffffcff 	.word	0xfffffcff
 8004164:	ffffdfff 	.word	0xffffdfff
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800
 8004178:	ffffbfff 	.word	0xffffbfff

0800417c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	2201      	movs	r2, #1
 8004194:	4393      	bics	r3, r2
 8004196:	001a      	movs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	22f0      	movs	r2, #240	; 0xf0
 80041a6:	4393      	bics	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	220a      	movs	r2, #10
 80041b8:	4393      	bics	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	621a      	str	r2, [r3, #32]
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b006      	add	sp, #24
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	2210      	movs	r2, #16
 80041ea:	4393      	bics	r3, r2
 80041ec:	001a      	movs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <TIM_TI2_ConfigInputStage+0x60>)
 8004202:	4013      	ands	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	22a0      	movs	r2, #160	; 0xa0
 8004214:	4393      	bics	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b006      	add	sp, #24
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	ffff0fff 	.word	0xffff0fff

0800423c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2270      	movs	r2, #112	; 0x70
 8004250:	4393      	bics	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	2207      	movs	r2, #7
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b004      	add	sp, #16
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <TIM_ETR_SetConfig+0x3c>)
 8004288:	4013      	ands	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	431a      	orrs	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	ffff00ff 	.word	0xffff00ff

080042b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	221f      	movs	r2, #31
 80042c0:	4013      	ands	r3, r2
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	0013      	movs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	43d2      	mvns	r2, r2
 80042d2:	401a      	ands	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	211f      	movs	r1, #31
 80042e0:	400b      	ands	r3, r1
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4099      	lsls	r1, r3
 80042e6:	000b      	movs	r3, r1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b006      	add	sp, #24
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223c      	movs	r2, #60	; 0x3c
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e047      	b.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	223c      	movs	r2, #60	; 0x3c
 8004314:	2101      	movs	r1, #1
 8004316:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	223d      	movs	r2, #61	; 0x3d
 800431c:	2102      	movs	r1, #2
 800431e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2270      	movs	r2, #112	; 0x70
 8004334:	4393      	bics	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00f      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	05db      	lsls	r3, r3, #23
 800435c:	429a      	cmp	r2, r3
 800435e:	d009      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10c      	bne.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	4393      	bics	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223d      	movs	r2, #61	; 0x3d
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223c      	movs	r2, #60	; 0x3c
 800439a:	2100      	movs	r1, #0
 800439c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b004      	add	sp, #16
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40014000 	.word	0x40014000

080043b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223c      	movs	r2, #60	; 0x3c
 80043c6:	5c9b      	ldrb	r3, [r3, r2]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e03e      	b.n	800444e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	223c      	movs	r2, #60	; 0x3c
 80043d4:	2101      	movs	r1, #1
 80043d6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	22ff      	movs	r2, #255	; 0xff
 80043dc:	4393      	bics	r3, r2
 80043de:	001a      	movs	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80043ec:	401a      	ands	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80043fa:	401a      	ands	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a16      	ldr	r2, [pc, #88]	; (8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004408:	401a      	ands	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004416:	401a      	ands	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004424:	401a      	ands	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a0e      	ldr	r2, [pc, #56]	; (800446c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004432:	401a      	ands	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	223c      	movs	r2, #60	; 0x3c
 8004448:	2100      	movs	r1, #0
 800444a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	fffffcff 	.word	0xfffffcff
 800445c:	fffffbff 	.word	0xfffffbff
 8004460:	fffff7ff 	.word	0xfffff7ff
 8004464:	ffffefff 	.word	0xffffefff
 8004468:	ffffdfff 	.word	0xffffdfff
 800446c:	ffffbfff 	.word	0xffffbfff

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e044      	b.n	800450c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2278      	movs	r2, #120	; 0x78
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7fd fbc5 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2224      	movs	r2, #36	; 0x24
 800449e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2101      	movs	r1, #1
 80044ac:	438a      	bics	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 f830 	bl	8004518 <UART_SetConfig>
 80044b8:	0003      	movs	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e024      	b.n	800450c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f9ab 	bl	8004828 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	490d      	ldr	r1, [pc, #52]	; (8004514 <HAL_UART_Init+0xa4>)
 80044de:	400a      	ands	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	212a      	movs	r1, #42	; 0x2a
 80044ee:	438a      	bics	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	430a      	orrs	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fa43 	bl	8004990 <UART_CheckIdleState>
 800450a:	0003      	movs	r3, r0
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}
 8004514:	ffffb7ff 	.word	0xffffb7ff

08004518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004520:	231e      	movs	r3, #30
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4aaf      	ldr	r2, [pc, #700]	; (8004804 <UART_SetConfig+0x2ec>)
 8004548:	4013      	ands	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4aaa      	ldr	r2, [pc, #680]	; (8004808 <UART_SetConfig+0x2f0>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4aa1      	ldr	r2, [pc, #644]	; (800480c <UART_SetConfig+0x2f4>)
 8004586:	4013      	ands	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	430a      	orrs	r2, r1
 8004592:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a9d      	ldr	r2, [pc, #628]	; (8004810 <UART_SetConfig+0x2f8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d127      	bne.n	80045ee <UART_SetConfig+0xd6>
 800459e:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <UART_SetConfig+0x2fc>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	2203      	movs	r2, #3
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d00d      	beq.n	80045c6 <UART_SetConfig+0xae>
 80045aa:	d81b      	bhi.n	80045e4 <UART_SetConfig+0xcc>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d014      	beq.n	80045da <UART_SetConfig+0xc2>
 80045b0:	d818      	bhi.n	80045e4 <UART_SetConfig+0xcc>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <UART_SetConfig+0xa4>
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00a      	beq.n	80045d0 <UART_SetConfig+0xb8>
 80045ba:	e013      	b.n	80045e4 <UART_SetConfig+0xcc>
 80045bc:	231f      	movs	r3, #31
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e065      	b.n	8004692 <UART_SetConfig+0x17a>
 80045c6:	231f      	movs	r3, #31
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2202      	movs	r2, #2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e060      	b.n	8004692 <UART_SetConfig+0x17a>
 80045d0:	231f      	movs	r3, #31
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2204      	movs	r2, #4
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e05b      	b.n	8004692 <UART_SetConfig+0x17a>
 80045da:	231f      	movs	r3, #31
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2208      	movs	r2, #8
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e056      	b.n	8004692 <UART_SetConfig+0x17a>
 80045e4:	231f      	movs	r3, #31
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2210      	movs	r2, #16
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e051      	b.n	8004692 <UART_SetConfig+0x17a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a89      	ldr	r2, [pc, #548]	; (8004818 <UART_SetConfig+0x300>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d134      	bne.n	8004662 <UART_SetConfig+0x14a>
 80045f8:	4b86      	ldr	r3, [pc, #536]	; (8004814 <UART_SetConfig+0x2fc>)
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	23c0      	movs	r3, #192	; 0xc0
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	4013      	ands	r3, r2
 8004602:	22c0      	movs	r2, #192	; 0xc0
 8004604:	0292      	lsls	r2, r2, #10
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <UART_SetConfig+0x122>
 800460a:	22c0      	movs	r2, #192	; 0xc0
 800460c:	0292      	lsls	r2, r2, #10
 800460e:	4293      	cmp	r3, r2
 8004610:	d822      	bhi.n	8004658 <UART_SetConfig+0x140>
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	0292      	lsls	r2, r2, #10
 8004616:	4293      	cmp	r3, r2
 8004618:	d019      	beq.n	800464e <UART_SetConfig+0x136>
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	0292      	lsls	r2, r2, #10
 800461e:	4293      	cmp	r3, r2
 8004620:	d81a      	bhi.n	8004658 <UART_SetConfig+0x140>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <UART_SetConfig+0x118>
 8004626:	2280      	movs	r2, #128	; 0x80
 8004628:	0252      	lsls	r2, r2, #9
 800462a:	4293      	cmp	r3, r2
 800462c:	d00a      	beq.n	8004644 <UART_SetConfig+0x12c>
 800462e:	e013      	b.n	8004658 <UART_SetConfig+0x140>
 8004630:	231f      	movs	r3, #31
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e02b      	b.n	8004692 <UART_SetConfig+0x17a>
 800463a:	231f      	movs	r3, #31
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e026      	b.n	8004692 <UART_SetConfig+0x17a>
 8004644:	231f      	movs	r3, #31
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e021      	b.n	8004692 <UART_SetConfig+0x17a>
 800464e:	231f      	movs	r3, #31
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2208      	movs	r2, #8
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e01c      	b.n	8004692 <UART_SetConfig+0x17a>
 8004658:	231f      	movs	r3, #31
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2210      	movs	r2, #16
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e017      	b.n	8004692 <UART_SetConfig+0x17a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6d      	ldr	r2, [pc, #436]	; (800481c <UART_SetConfig+0x304>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d104      	bne.n	8004676 <UART_SetConfig+0x15e>
 800466c:	231f      	movs	r3, #31
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x17a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a69      	ldr	r2, [pc, #420]	; (8004820 <UART_SetConfig+0x308>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d104      	bne.n	800468a <UART_SetConfig+0x172>
 8004680:	231f      	movs	r3, #31
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e003      	b.n	8004692 <UART_SetConfig+0x17a>
 800468a:	231f      	movs	r3, #31
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2210      	movs	r2, #16
 8004690:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	429a      	cmp	r2, r3
 800469c:	d15c      	bne.n	8004758 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800469e:	231f      	movs	r3, #31
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d015      	beq.n	80046d4 <UART_SetConfig+0x1bc>
 80046a8:	dc18      	bgt.n	80046dc <UART_SetConfig+0x1c4>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d00d      	beq.n	80046ca <UART_SetConfig+0x1b2>
 80046ae:	dc15      	bgt.n	80046dc <UART_SetConfig+0x1c4>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <UART_SetConfig+0x1a2>
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d005      	beq.n	80046c4 <UART_SetConfig+0x1ac>
 80046b8:	e010      	b.n	80046dc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ba:	f7fe fb47 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80046be:	0003      	movs	r3, r0
 80046c0:	61bb      	str	r3, [r7, #24]
        break;
 80046c2:	e012      	b.n	80046ea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b57      	ldr	r3, [pc, #348]	; (8004824 <UART_SetConfig+0x30c>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00f      	b.n	80046ea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe fac3 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80046ce:	0003      	movs	r3, r0
 80046d0:	61bb      	str	r3, [r7, #24]
        break;
 80046d2:	e00a      	b.n	80046ea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	61bb      	str	r3, [r7, #24]
        break;
 80046da:	e006      	b.n	80046ea <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e0:	231e      	movs	r3, #30
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
        break;
 80046e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d100      	bne.n	80046f2 <UART_SetConfig+0x1da>
 80046f0:	e07a      	b.n	80047e8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	005a      	lsls	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	18d2      	adds	r2, r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0019      	movs	r1, r3
 8004704:	0010      	movs	r0, r2
 8004706:	f7fb fd09 	bl	800011c <__udivsi3>
 800470a:	0003      	movs	r3, r0
 800470c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d91c      	bls.n	800474e <UART_SetConfig+0x236>
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	025b      	lsls	r3, r3, #9
 800471a:	429a      	cmp	r2, r3
 800471c:	d217      	bcs.n	800474e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	b29a      	uxth	r2, r3
 8004722:	200e      	movs	r0, #14
 8004724:	183b      	adds	r3, r7, r0
 8004726:	210f      	movs	r1, #15
 8004728:	438a      	bics	r2, r1
 800472a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	2207      	movs	r2, #7
 8004734:	4013      	ands	r3, r2
 8004736:	b299      	uxth	r1, r3
 8004738:	183b      	adds	r3, r7, r0
 800473a:	183a      	adds	r2, r7, r0
 800473c:	8812      	ldrh	r2, [r2, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	183a      	adds	r2, r7, r0
 8004748:	8812      	ldrh	r2, [r2, #0]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	e04c      	b.n	80047e8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800474e:	231e      	movs	r3, #30
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e047      	b.n	80047e8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004758:	231f      	movs	r3, #31
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d015      	beq.n	800478e <UART_SetConfig+0x276>
 8004762:	dc18      	bgt.n	8004796 <UART_SetConfig+0x27e>
 8004764:	2b04      	cmp	r3, #4
 8004766:	d00d      	beq.n	8004784 <UART_SetConfig+0x26c>
 8004768:	dc15      	bgt.n	8004796 <UART_SetConfig+0x27e>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0x25c>
 800476e:	2b02      	cmp	r3, #2
 8004770:	d005      	beq.n	800477e <UART_SetConfig+0x266>
 8004772:	e010      	b.n	8004796 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe faea 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8004778:	0003      	movs	r3, r0
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e012      	b.n	80047a4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <UART_SetConfig+0x30c>)
 8004780:	61bb      	str	r3, [r7, #24]
        break;
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004784:	f7fe fa66 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8004788:	0003      	movs	r3, r0
 800478a:	61bb      	str	r3, [r7, #24]
        break;
 800478c:	e00a      	b.n	80047a4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e006      	b.n	80047a4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800479a:	231e      	movs	r3, #30
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
        break;
 80047a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01e      	beq.n	80047e8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085a      	lsrs	r2, r3, #1
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	18d2      	adds	r2, r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	0019      	movs	r1, r3
 80047ba:	0010      	movs	r0, r2
 80047bc:	f7fb fcae 	bl	800011c <__udivsi3>
 80047c0:	0003      	movs	r3, r0
 80047c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d90a      	bls.n	80047e0 <UART_SetConfig+0x2c8>
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d205      	bcs.n	80047e0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e003      	b.n	80047e8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80047e0:	231e      	movs	r3, #30
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80047f4:	231e      	movs	r3, #30
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	781b      	ldrb	r3, [r3, #0]
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b008      	add	sp, #32
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	efff69f3 	.word	0xefff69f3
 8004808:	ffffcfff 	.word	0xffffcfff
 800480c:	fffff4ff 	.word	0xfffff4ff
 8004810:	40013800 	.word	0x40013800
 8004814:	40021000 	.word	0x40021000
 8004818:	40004400 	.word	0x40004400
 800481c:	40004800 	.word	0x40004800
 8004820:	40004c00 	.word	0x40004c00
 8004824:	007a1200 	.word	0x007a1200

08004828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2201      	movs	r2, #1
 8004836:	4013      	ands	r3, r2
 8004838:	d00b      	beq.n	8004852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a4a      	ldr	r2, [pc, #296]	; (800496c <UART_AdvFeatureConfig+0x144>)
 8004842:	4013      	ands	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2202      	movs	r2, #2
 8004858:	4013      	ands	r3, r2
 800485a:	d00b      	beq.n	8004874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a43      	ldr	r2, [pc, #268]	; (8004970 <UART_AdvFeatureConfig+0x148>)
 8004864:	4013      	ands	r3, r2
 8004866:	0019      	movs	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2204      	movs	r2, #4
 800487a:	4013      	ands	r3, r2
 800487c:	d00b      	beq.n	8004896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <UART_AdvFeatureConfig+0x14c>)
 8004886:	4013      	ands	r3, r2
 8004888:	0019      	movs	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2208      	movs	r2, #8
 800489c:	4013      	ands	r3, r2
 800489e:	d00b      	beq.n	80048b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4a34      	ldr	r2, [pc, #208]	; (8004978 <UART_AdvFeatureConfig+0x150>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	d00b      	beq.n	80048da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	; (800497c <UART_AdvFeatureConfig+0x154>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2220      	movs	r2, #32
 80048e0:	4013      	ands	r3, r2
 80048e2:	d00b      	beq.n	80048fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <UART_AdvFeatureConfig+0x158>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	4013      	ands	r3, r2
 8004904:	d01d      	beq.n	8004942 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <UART_AdvFeatureConfig+0x15c>)
 800490e:	4013      	ands	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	035b      	lsls	r3, r3, #13
 8004926:	429a      	cmp	r2, r3
 8004928:	d10b      	bne.n	8004942 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <UART_AdvFeatureConfig+0x160>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	4013      	ands	r3, r2
 800494a:	d00b      	beq.n	8004964 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4a0e      	ldr	r2, [pc, #56]	; (800498c <UART_AdvFeatureConfig+0x164>)
 8004954:	4013      	ands	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}
 800496c:	fffdffff 	.word	0xfffdffff
 8004970:	fffeffff 	.word	0xfffeffff
 8004974:	fffbffff 	.word	0xfffbffff
 8004978:	ffff7fff 	.word	0xffff7fff
 800497c:	ffffefff 	.word	0xffffefff
 8004980:	ffffdfff 	.word	0xffffdfff
 8004984:	ffefffff 	.word	0xffefffff
 8004988:	ff9fffff 	.word	0xff9fffff
 800498c:	fff7ffff 	.word	0xfff7ffff

08004990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b092      	sub	sp, #72	; 0x48
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2284      	movs	r2, #132	; 0x84
 800499c:	2100      	movs	r1, #0
 800499e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a0:	f7fd fa64 	bl	8001e6c <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2208      	movs	r2, #8
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d12c      	bne.n	8004a10 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	2280      	movs	r2, #128	; 0x80
 80049ba:	0391      	lsls	r1, r2, #14
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4a46      	ldr	r2, [pc, #280]	; (8004ad8 <UART_CheckIdleState+0x148>)
 80049c0:	9200      	str	r2, [sp, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f000 f88c 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 80049c8:	1e03      	subs	r3, r0, #0
 80049ca:	d021      	beq.n	8004a10 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049cc:	f3ef 8310 	mrs	r3, PRIMASK
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d6:	2301      	movs	r3, #1
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	438a      	bics	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2278      	movs	r2, #120	; 0x78
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e05f      	b.n	8004ad0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d146      	bne.n	8004aac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	03d1      	lsls	r1, r2, #15
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	; (8004ad8 <UART_CheckIdleState+0x148>)
 8004a28:	9200      	str	r2, [sp, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f000 f858 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d03b      	beq.n	8004aac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a34:	f3ef 8310 	mrs	r3, PRIMASK
 8004a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	2301      	movs	r3, #1
 8004a40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4921      	ldr	r1, [pc, #132]	; (8004adc <UART_CheckIdleState+0x14c>)
 8004a56:	400a      	ands	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a66:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a70:	2301      	movs	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2278      	movs	r2, #120	; 0x78
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e011      	b.n	8004ad0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2278      	movs	r2, #120	; 0x78
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b010      	add	sp, #64	; 0x40
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	01ffffff 	.word	0x01ffffff
 8004adc:	fffffedf 	.word	0xfffffedf

08004ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	1dfb      	adds	r3, r7, #7
 8004aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af0:	e04b      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	3301      	adds	r3, #1
 8004af6:	d048      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af8:	f7fd f9b8 	bl	8001e6c <HAL_GetTick>
 8004afc:	0002      	movs	r2, r0
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d302      	bcc.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04b      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d035      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2208      	movs	r2, #8
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d111      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2208      	movs	r2, #8
 8004b32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 f83c 	bl	8004bb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2284      	movs	r2, #132	; 0x84
 8004b40:	2108      	movs	r1, #8
 8004b42:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2278      	movs	r2, #120	; 0x78
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e02c      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d112      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f81f 	bl	8004bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2284      	movs	r2, #132	; 0x84
 8004b7a:	2120      	movs	r1, #32
 8004b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2278      	movs	r2, #120	; 0x78
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00f      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	425a      	negs	r2, r3
 8004b9a:	4153      	adcs	r3, r2
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	1dfb      	adds	r3, r7, #7
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d0a4      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08e      	sub	sp, #56	; 0x38
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4926      	ldr	r1, [pc, #152]	; (8004c78 <UART_EndRxTransfer+0xc4>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	623b      	str	r3, [r7, #32]
  return(result);
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	438a      	bics	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d118      	bne.n	8004c5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c32:	2301      	movs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2110      	movs	r1, #16
 8004c4a:	438a      	bics	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2280      	movs	r2, #128	; 0x80
 8004c5e:	2120      	movs	r1, #32
 8004c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b00e      	add	sp, #56	; 0x38
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	fffffedf 	.word	0xfffffedf

08004c7c <siprintf>:
 8004c7c:	b40e      	push	{r1, r2, r3}
 8004c7e:	b500      	push	{lr}
 8004c80:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <siprintf+0x34>)
 8004c82:	b09c      	sub	sp, #112	; 0x70
 8004c84:	ab1d      	add	r3, sp, #116	; 0x74
 8004c86:	9002      	str	r0, [sp, #8]
 8004c88:	9006      	str	r0, [sp, #24]
 8004c8a:	9107      	str	r1, [sp, #28]
 8004c8c:	9104      	str	r1, [sp, #16]
 8004c8e:	4809      	ldr	r0, [pc, #36]	; (8004cb4 <siprintf+0x38>)
 8004c90:	4909      	ldr	r1, [pc, #36]	; (8004cb8 <siprintf+0x3c>)
 8004c92:	cb04      	ldmia	r3!, {r2}
 8004c94:	9105      	str	r1, [sp, #20]
 8004c96:	6800      	ldr	r0, [r0, #0]
 8004c98:	a902      	add	r1, sp, #8
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f000 f9a2 	bl	8004fe4 <_svfiprintf_r>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	9b02      	ldr	r3, [sp, #8]
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	b01c      	add	sp, #112	; 0x70
 8004ca8:	bc08      	pop	{r3}
 8004caa:	b003      	add	sp, #12
 8004cac:	4718      	bx	r3
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	7fffffff 	.word	0x7fffffff
 8004cb4:	20000060 	.word	0x20000060
 8004cb8:	ffff0208 	.word	0xffff0208

08004cbc <memset>:
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	1882      	adds	r2, r0, r2
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	7019      	strb	r1, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	20000060 	.word	0x20000060

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	2600      	movs	r6, #0
 8004cdc:	4c0c      	ldr	r4, [pc, #48]	; (8004d10 <__libc_init_array+0x38>)
 8004cde:	4d0d      	ldr	r5, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	f000 fc6d 	bl	80055c8 <_init>
 8004cee:	4c0a      	ldr	r4, [pc, #40]	; (8004d18 <__libc_init_array+0x40>)
 8004cf0:	4d0a      	ldr	r5, [pc, #40]	; (8004d1c <__libc_init_array+0x44>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	00b3      	lsls	r3, r6, #2
 8004cfe:	58eb      	ldr	r3, [r5, r3]
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	00b3      	lsls	r3, r6, #2
 8004d08:	58eb      	ldr	r3, [r5, r3]
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08006a28 	.word	0x08006a28
 8004d14:	08006a28 	.word	0x08006a28
 8004d18:	08006a2c 	.word	0x08006a2c
 8004d1c:	08006a28 	.word	0x08006a28

08004d20 <__retarget_lock_acquire_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__retarget_lock_release_recursive>:
 8004d22:	4770      	bx	lr

08004d24 <_free_r>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	0005      	movs	r5, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d010      	beq.n	8004d4e <_free_r+0x2a>
 8004d2c:	1f0c      	subs	r4, r1, #4
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da00      	bge.n	8004d36 <_free_r+0x12>
 8004d34:	18e4      	adds	r4, r4, r3
 8004d36:	0028      	movs	r0, r5
 8004d38:	f000 f8e2 	bl	8004f00 <__malloc_lock>
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <_free_r+0x90>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <_free_r+0x2c>
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	6014      	str	r4, [r2, #0]
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f000 f8e1 	bl	8004f10 <__malloc_unlock>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x42>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d1f3      	bne.n	8004d44 <_free_r+0x20>
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	1809      	adds	r1, r1, r0
 8004d62:	6021      	str	r1, [r4, #0]
 8004d64:	e7ee      	b.n	8004d44 <_free_r+0x20>
 8004d66:	001a      	movs	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <_free_r+0x4e>
 8004d6e:	42a3      	cmp	r3, r4
 8004d70:	d9f9      	bls.n	8004d66 <_free_r+0x42>
 8004d72:	6811      	ldr	r1, [r2, #0]
 8004d74:	1850      	adds	r0, r2, r1
 8004d76:	42a0      	cmp	r0, r4
 8004d78:	d10b      	bne.n	8004d92 <_free_r+0x6e>
 8004d7a:	6820      	ldr	r0, [r4, #0]
 8004d7c:	1809      	adds	r1, r1, r0
 8004d7e:	1850      	adds	r0, r2, r1
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	4283      	cmp	r3, r0
 8004d84:	d1e0      	bne.n	8004d48 <_free_r+0x24>
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	1841      	adds	r1, r0, r1
 8004d8c:	6011      	str	r1, [r2, #0]
 8004d8e:	6053      	str	r3, [r2, #4]
 8004d90:	e7da      	b.n	8004d48 <_free_r+0x24>
 8004d92:	42a0      	cmp	r0, r4
 8004d94:	d902      	bls.n	8004d9c <_free_r+0x78>
 8004d96:	230c      	movs	r3, #12
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	e7d5      	b.n	8004d48 <_free_r+0x24>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	1821      	adds	r1, r4, r0
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d103      	bne.n	8004dac <_free_r+0x88>
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	1809      	adds	r1, r1, r0
 8004daa:	6021      	str	r1, [r4, #0]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	6054      	str	r4, [r2, #4]
 8004db0:	e7ca      	b.n	8004d48 <_free_r+0x24>
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	20000350 	.word	0x20000350

08004db8 <sbrk_aligned>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4e0f      	ldr	r6, [pc, #60]	; (8004df8 <sbrk_aligned+0x40>)
 8004dbc:	000d      	movs	r5, r1
 8004dbe:	6831      	ldr	r1, [r6, #0]
 8004dc0:	0004      	movs	r4, r0
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d102      	bne.n	8004dcc <sbrk_aligned+0x14>
 8004dc6:	f000 fba1 	bl	800550c <_sbrk_r>
 8004dca:	6030      	str	r0, [r6, #0]
 8004dcc:	0029      	movs	r1, r5
 8004dce:	0020      	movs	r0, r4
 8004dd0:	f000 fb9c 	bl	800550c <_sbrk_r>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d00a      	beq.n	8004dee <sbrk_aligned+0x36>
 8004dd8:	2303      	movs	r3, #3
 8004dda:	1cc5      	adds	r5, r0, #3
 8004ddc:	439d      	bics	r5, r3
 8004dde:	42a8      	cmp	r0, r5
 8004de0:	d007      	beq.n	8004df2 <sbrk_aligned+0x3a>
 8004de2:	1a29      	subs	r1, r5, r0
 8004de4:	0020      	movs	r0, r4
 8004de6:	f000 fb91 	bl	800550c <_sbrk_r>
 8004dea:	3001      	adds	r0, #1
 8004dec:	d101      	bne.n	8004df2 <sbrk_aligned+0x3a>
 8004dee:	2501      	movs	r5, #1
 8004df0:	426d      	negs	r5, r5
 8004df2:	0028      	movs	r0, r5
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20000354 	.word	0x20000354

08004dfc <_malloc_r>:
 8004dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dfe:	2203      	movs	r2, #3
 8004e00:	1ccb      	adds	r3, r1, #3
 8004e02:	4393      	bics	r3, r2
 8004e04:	3308      	adds	r3, #8
 8004e06:	0006      	movs	r6, r0
 8004e08:	001f      	movs	r7, r3
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d238      	bcs.n	8004e80 <_malloc_r+0x84>
 8004e0e:	270c      	movs	r7, #12
 8004e10:	42b9      	cmp	r1, r7
 8004e12:	d837      	bhi.n	8004e84 <_malloc_r+0x88>
 8004e14:	0030      	movs	r0, r6
 8004e16:	f000 f873 	bl	8004f00 <__malloc_lock>
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <_malloc_r+0x100>)
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	001c      	movs	r4, r3
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d133      	bne.n	8004e8e <_malloc_r+0x92>
 8004e26:	0039      	movs	r1, r7
 8004e28:	0030      	movs	r0, r6
 8004e2a:	f7ff ffc5 	bl	8004db8 <sbrk_aligned>
 8004e2e:	0004      	movs	r4, r0
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d15e      	bne.n	8004ef2 <_malloc_r+0xf6>
 8004e34:	9b00      	ldr	r3, [sp, #0]
 8004e36:	681c      	ldr	r4, [r3, #0]
 8004e38:	0025      	movs	r5, r4
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	d14e      	bne.n	8004edc <_malloc_r+0xe0>
 8004e3e:	2c00      	cmp	r4, #0
 8004e40:	d051      	beq.n	8004ee6 <_malloc_r+0xea>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	0029      	movs	r1, r5
 8004e46:	18e3      	adds	r3, r4, r3
 8004e48:	0030      	movs	r0, r6
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	f000 fb5e 	bl	800550c <_sbrk_r>
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	4283      	cmp	r3, r0
 8004e54:	d147      	bne.n	8004ee6 <_malloc_r+0xea>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	0030      	movs	r0, r6
 8004e5a:	1aff      	subs	r7, r7, r3
 8004e5c:	0039      	movs	r1, r7
 8004e5e:	f7ff ffab 	bl	8004db8 <sbrk_aligned>
 8004e62:	3001      	adds	r0, #1
 8004e64:	d03f      	beq.n	8004ee6 <_malloc_r+0xea>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	19db      	adds	r3, r3, r7
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	9b00      	ldr	r3, [sp, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d040      	beq.n	8004ef6 <_malloc_r+0xfa>
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	42a2      	cmp	r2, r4
 8004e78:	d133      	bne.n	8004ee2 <_malloc_r+0xe6>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	e014      	b.n	8004eaa <_malloc_r+0xae>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dac5      	bge.n	8004e10 <_malloc_r+0x14>
 8004e84:	230c      	movs	r3, #12
 8004e86:	2500      	movs	r5, #0
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	0028      	movs	r0, r5
 8004e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	1bc9      	subs	r1, r1, r7
 8004e92:	d420      	bmi.n	8004ed6 <_malloc_r+0xda>
 8004e94:	290b      	cmp	r1, #11
 8004e96:	d918      	bls.n	8004eca <_malloc_r+0xce>
 8004e98:	19e2      	adds	r2, r4, r7
 8004e9a:	6027      	str	r7, [r4, #0]
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d112      	bne.n	8004ec6 <_malloc_r+0xca>
 8004ea0:	9b00      	ldr	r3, [sp, #0]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6011      	str	r1, [r2, #0]
 8004ea8:	6053      	str	r3, [r2, #4]
 8004eaa:	0030      	movs	r0, r6
 8004eac:	0025      	movs	r5, r4
 8004eae:	f000 f82f 	bl	8004f10 <__malloc_unlock>
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	350b      	adds	r5, #11
 8004eb6:	1d23      	adds	r3, r4, #4
 8004eb8:	4395      	bics	r5, r2
 8004eba:	1aea      	subs	r2, r5, r3
 8004ebc:	429d      	cmp	r5, r3
 8004ebe:	d0e4      	beq.n	8004e8a <_malloc_r+0x8e>
 8004ec0:	1b5b      	subs	r3, r3, r5
 8004ec2:	50a3      	str	r3, [r4, r2]
 8004ec4:	e7e1      	b.n	8004e8a <_malloc_r+0x8e>
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	e7ec      	b.n	8004ea4 <_malloc_r+0xa8>
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d1d5      	bne.n	8004e7c <_malloc_r+0x80>
 8004ed0:	9b00      	ldr	r3, [sp, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e7e9      	b.n	8004eaa <_malloc_r+0xae>
 8004ed6:	0023      	movs	r3, r4
 8004ed8:	6864      	ldr	r4, [r4, #4]
 8004eda:	e7a2      	b.n	8004e22 <_malloc_r+0x26>
 8004edc:	002c      	movs	r4, r5
 8004ede:	686d      	ldr	r5, [r5, #4]
 8004ee0:	e7ab      	b.n	8004e3a <_malloc_r+0x3e>
 8004ee2:	0013      	movs	r3, r2
 8004ee4:	e7c4      	b.n	8004e70 <_malloc_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	0030      	movs	r0, r6
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f000 f810 	bl	8004f10 <__malloc_unlock>
 8004ef0:	e7cb      	b.n	8004e8a <_malloc_r+0x8e>
 8004ef2:	6027      	str	r7, [r4, #0]
 8004ef4:	e7d9      	b.n	8004eaa <_malloc_r+0xae>
 8004ef6:	605b      	str	r3, [r3, #4]
 8004ef8:	deff      	udf	#255	; 0xff
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	20000350 	.word	0x20000350

08004f00 <__malloc_lock>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4802      	ldr	r0, [pc, #8]	; (8004f0c <__malloc_lock+0xc>)
 8004f04:	f7ff ff0c 	bl	8004d20 <__retarget_lock_acquire_recursive>
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	2000034c 	.word	0x2000034c

08004f10 <__malloc_unlock>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	4802      	ldr	r0, [pc, #8]	; (8004f1c <__malloc_unlock+0xc>)
 8004f14:	f7ff ff05 	bl	8004d22 <__retarget_lock_release_recursive>
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	2000034c 	.word	0x2000034c

08004f20 <__ssputs_r>:
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	9203      	str	r2, [sp, #12]
 8004f28:	688e      	ldr	r6, [r1, #8]
 8004f2a:	9a01      	ldr	r2, [sp, #4]
 8004f2c:	0007      	movs	r7, r0
 8004f2e:	000c      	movs	r4, r1
 8004f30:	680b      	ldr	r3, [r1, #0]
 8004f32:	4296      	cmp	r6, r2
 8004f34:	d831      	bhi.n	8004f9a <__ssputs_r+0x7a>
 8004f36:	898a      	ldrh	r2, [r1, #12]
 8004f38:	2190      	movs	r1, #144	; 0x90
 8004f3a:	00c9      	lsls	r1, r1, #3
 8004f3c:	420a      	tst	r2, r1
 8004f3e:	d029      	beq.n	8004f94 <__ssputs_r+0x74>
 8004f40:	2003      	movs	r0, #3
 8004f42:	6921      	ldr	r1, [r4, #16]
 8004f44:	1a5b      	subs	r3, r3, r1
 8004f46:	9302      	str	r3, [sp, #8]
 8004f48:	6963      	ldr	r3, [r4, #20]
 8004f4a:	4343      	muls	r3, r0
 8004f4c:	0fdd      	lsrs	r5, r3, #31
 8004f4e:	18ed      	adds	r5, r5, r3
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	9802      	ldr	r0, [sp, #8]
 8004f54:	3301      	adds	r3, #1
 8004f56:	181b      	adds	r3, r3, r0
 8004f58:	106d      	asrs	r5, r5, #1
 8004f5a:	42ab      	cmp	r3, r5
 8004f5c:	d900      	bls.n	8004f60 <__ssputs_r+0x40>
 8004f5e:	001d      	movs	r5, r3
 8004f60:	0552      	lsls	r2, r2, #21
 8004f62:	d529      	bpl.n	8004fb8 <__ssputs_r+0x98>
 8004f64:	0029      	movs	r1, r5
 8004f66:	0038      	movs	r0, r7
 8004f68:	f7ff ff48 	bl	8004dfc <_malloc_r>
 8004f6c:	1e06      	subs	r6, r0, #0
 8004f6e:	d02d      	beq.n	8004fcc <__ssputs_r+0xac>
 8004f70:	9a02      	ldr	r2, [sp, #8]
 8004f72:	6921      	ldr	r1, [r4, #16]
 8004f74:	f000 fae7 	bl	8005546 <memcpy>
 8004f78:	89a2      	ldrh	r2, [r4, #12]
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <__ssputs_r+0xc0>)
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	4313      	orrs	r3, r2
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	6126      	str	r6, [r4, #16]
 8004f88:	18f6      	adds	r6, r6, r3
 8004f8a:	6026      	str	r6, [r4, #0]
 8004f8c:	6165      	str	r5, [r4, #20]
 8004f8e:	9e01      	ldr	r6, [sp, #4]
 8004f90:	1aed      	subs	r5, r5, r3
 8004f92:	60a5      	str	r5, [r4, #8]
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	429e      	cmp	r6, r3
 8004f98:	d900      	bls.n	8004f9c <__ssputs_r+0x7c>
 8004f9a:	9e01      	ldr	r6, [sp, #4]
 8004f9c:	0032      	movs	r2, r6
 8004f9e:	9903      	ldr	r1, [sp, #12]
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	f000 fa9f 	bl	80054e4 <memmove>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	1b9b      	subs	r3, r3, r6
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	199b      	adds	r3, r3, r6
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	b005      	add	sp, #20
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	002a      	movs	r2, r5
 8004fba:	0038      	movs	r0, r7
 8004fbc:	f000 facc 	bl	8005558 <_realloc_r>
 8004fc0:	1e06      	subs	r6, r0, #0
 8004fc2:	d1df      	bne.n	8004f84 <__ssputs_r+0x64>
 8004fc4:	0038      	movs	r0, r7
 8004fc6:	6921      	ldr	r1, [r4, #16]
 8004fc8:	f7ff feac 	bl	8004d24 <_free_r>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	2001      	movs	r0, #1
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	89a2      	ldrh	r2, [r4, #12]
 8004fd4:	3334      	adds	r3, #52	; 0x34
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	4240      	negs	r0, r0
 8004fdc:	e7ea      	b.n	8004fb4 <__ssputs_r+0x94>
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	fffffb7f 	.word	0xfffffb7f

08004fe4 <_svfiprintf_r>:
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	b0a1      	sub	sp, #132	; 0x84
 8004fe8:	9003      	str	r0, [sp, #12]
 8004fea:	001d      	movs	r5, r3
 8004fec:	898b      	ldrh	r3, [r1, #12]
 8004fee:	000f      	movs	r7, r1
 8004ff0:	0016      	movs	r6, r2
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	d511      	bpl.n	800501a <_svfiprintf_r+0x36>
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10e      	bne.n	800501a <_svfiprintf_r+0x36>
 8004ffc:	2140      	movs	r1, #64	; 0x40
 8004ffe:	f7ff fefd 	bl	8004dfc <_malloc_r>
 8005002:	6038      	str	r0, [r7, #0]
 8005004:	6138      	str	r0, [r7, #16]
 8005006:	2800      	cmp	r0, #0
 8005008:	d105      	bne.n	8005016 <_svfiprintf_r+0x32>
 800500a:	230c      	movs	r3, #12
 800500c:	9a03      	ldr	r2, [sp, #12]
 800500e:	3801      	subs	r0, #1
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	b021      	add	sp, #132	; 0x84
 8005014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	ac08      	add	r4, sp, #32
 800501e:	6163      	str	r3, [r4, #20]
 8005020:	3320      	adds	r3, #32
 8005022:	7663      	strb	r3, [r4, #25]
 8005024:	3310      	adds	r3, #16
 8005026:	76a3      	strb	r3, [r4, #26]
 8005028:	9507      	str	r5, [sp, #28]
 800502a:	0035      	movs	r5, r6
 800502c:	782b      	ldrb	r3, [r5, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <_svfiprintf_r+0x52>
 8005032:	2b25      	cmp	r3, #37	; 0x25
 8005034:	d148      	bne.n	80050c8 <_svfiprintf_r+0xe4>
 8005036:	1bab      	subs	r3, r5, r6
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	42b5      	cmp	r5, r6
 800503c:	d00b      	beq.n	8005056 <_svfiprintf_r+0x72>
 800503e:	0032      	movs	r2, r6
 8005040:	0039      	movs	r1, r7
 8005042:	9803      	ldr	r0, [sp, #12]
 8005044:	f7ff ff6c 	bl	8004f20 <__ssputs_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d100      	bne.n	800504e <_svfiprintf_r+0x6a>
 800504c:	e0af      	b.n	80051ae <_svfiprintf_r+0x1ca>
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	9a05      	ldr	r2, [sp, #20]
 8005052:	189b      	adds	r3, r3, r2
 8005054:	6163      	str	r3, [r4, #20]
 8005056:	782b      	ldrb	r3, [r5, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d100      	bne.n	800505e <_svfiprintf_r+0x7a>
 800505c:	e0a7      	b.n	80051ae <_svfiprintf_r+0x1ca>
 800505e:	2201      	movs	r2, #1
 8005060:	2300      	movs	r3, #0
 8005062:	4252      	negs	r2, r2
 8005064:	6062      	str	r2, [r4, #4]
 8005066:	a904      	add	r1, sp, #16
 8005068:	3254      	adds	r2, #84	; 0x54
 800506a:	1852      	adds	r2, r2, r1
 800506c:	1c6e      	adds	r6, r5, #1
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	60e3      	str	r3, [r4, #12]
 8005072:	60a3      	str	r3, [r4, #8]
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	65a3      	str	r3, [r4, #88]	; 0x58
 8005078:	4b55      	ldr	r3, [pc, #340]	; (80051d0 <_svfiprintf_r+0x1ec>)
 800507a:	2205      	movs	r2, #5
 800507c:	0018      	movs	r0, r3
 800507e:	7831      	ldrb	r1, [r6, #0]
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	f000 fa55 	bl	8005530 <memchr>
 8005086:	1c75      	adds	r5, r6, #1
 8005088:	2800      	cmp	r0, #0
 800508a:	d11f      	bne.n	80050cc <_svfiprintf_r+0xe8>
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	06d3      	lsls	r3, r2, #27
 8005090:	d504      	bpl.n	800509c <_svfiprintf_r+0xb8>
 8005092:	2353      	movs	r3, #83	; 0x53
 8005094:	a904      	add	r1, sp, #16
 8005096:	185b      	adds	r3, r3, r1
 8005098:	2120      	movs	r1, #32
 800509a:	7019      	strb	r1, [r3, #0]
 800509c:	0713      	lsls	r3, r2, #28
 800509e:	d504      	bpl.n	80050aa <_svfiprintf_r+0xc6>
 80050a0:	2353      	movs	r3, #83	; 0x53
 80050a2:	a904      	add	r1, sp, #16
 80050a4:	185b      	adds	r3, r3, r1
 80050a6:	212b      	movs	r1, #43	; 0x2b
 80050a8:	7019      	strb	r1, [r3, #0]
 80050aa:	7833      	ldrb	r3, [r6, #0]
 80050ac:	2b2a      	cmp	r3, #42	; 0x2a
 80050ae:	d016      	beq.n	80050de <_svfiprintf_r+0xfa>
 80050b0:	0035      	movs	r5, r6
 80050b2:	2100      	movs	r1, #0
 80050b4:	200a      	movs	r0, #10
 80050b6:	68e3      	ldr	r3, [r4, #12]
 80050b8:	782a      	ldrb	r2, [r5, #0]
 80050ba:	1c6e      	adds	r6, r5, #1
 80050bc:	3a30      	subs	r2, #48	; 0x30
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d94e      	bls.n	8005160 <_svfiprintf_r+0x17c>
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d111      	bne.n	80050ea <_svfiprintf_r+0x106>
 80050c6:	e017      	b.n	80050f8 <_svfiprintf_r+0x114>
 80050c8:	3501      	adds	r5, #1
 80050ca:	e7af      	b.n	800502c <_svfiprintf_r+0x48>
 80050cc:	9b05      	ldr	r3, [sp, #20]
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	1ac0      	subs	r0, r0, r3
 80050d2:	2301      	movs	r3, #1
 80050d4:	4083      	lsls	r3, r0
 80050d6:	4313      	orrs	r3, r2
 80050d8:	002e      	movs	r6, r5
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	e7cc      	b.n	8005078 <_svfiprintf_r+0x94>
 80050de:	9b07      	ldr	r3, [sp, #28]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9107      	str	r1, [sp, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db01      	blt.n	80050ee <_svfiprintf_r+0x10a>
 80050ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ec:	e004      	b.n	80050f8 <_svfiprintf_r+0x114>
 80050ee:	425b      	negs	r3, r3
 80050f0:	60e3      	str	r3, [r4, #12]
 80050f2:	2302      	movs	r3, #2
 80050f4:	4313      	orrs	r3, r2
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	782b      	ldrb	r3, [r5, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10a      	bne.n	8005114 <_svfiprintf_r+0x130>
 80050fe:	786b      	ldrb	r3, [r5, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d135      	bne.n	8005170 <_svfiprintf_r+0x18c>
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	3502      	adds	r5, #2
 8005108:	1d1a      	adds	r2, r3, #4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	9207      	str	r2, [sp, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	db2b      	blt.n	800516a <_svfiprintf_r+0x186>
 8005112:	9309      	str	r3, [sp, #36]	; 0x24
 8005114:	4e2f      	ldr	r6, [pc, #188]	; (80051d4 <_svfiprintf_r+0x1f0>)
 8005116:	2203      	movs	r2, #3
 8005118:	0030      	movs	r0, r6
 800511a:	7829      	ldrb	r1, [r5, #0]
 800511c:	f000 fa08 	bl	8005530 <memchr>
 8005120:	2800      	cmp	r0, #0
 8005122:	d006      	beq.n	8005132 <_svfiprintf_r+0x14e>
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	4083      	lsls	r3, r0
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	3501      	adds	r5, #1
 800512e:	4313      	orrs	r3, r2
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	7829      	ldrb	r1, [r5, #0]
 8005134:	2206      	movs	r2, #6
 8005136:	4828      	ldr	r0, [pc, #160]	; (80051d8 <_svfiprintf_r+0x1f4>)
 8005138:	1c6e      	adds	r6, r5, #1
 800513a:	7621      	strb	r1, [r4, #24]
 800513c:	f000 f9f8 	bl	8005530 <memchr>
 8005140:	2800      	cmp	r0, #0
 8005142:	d03c      	beq.n	80051be <_svfiprintf_r+0x1da>
 8005144:	4b25      	ldr	r3, [pc, #148]	; (80051dc <_svfiprintf_r+0x1f8>)
 8005146:	2b00      	cmp	r3, #0
 8005148:	d125      	bne.n	8005196 <_svfiprintf_r+0x1b2>
 800514a:	2207      	movs	r2, #7
 800514c:	9b07      	ldr	r3, [sp, #28]
 800514e:	3307      	adds	r3, #7
 8005150:	4393      	bics	r3, r2
 8005152:	3308      	adds	r3, #8
 8005154:	9307      	str	r3, [sp, #28]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	9a04      	ldr	r2, [sp, #16]
 800515a:	189b      	adds	r3, r3, r2
 800515c:	6163      	str	r3, [r4, #20]
 800515e:	e764      	b.n	800502a <_svfiprintf_r+0x46>
 8005160:	4343      	muls	r3, r0
 8005162:	0035      	movs	r5, r6
 8005164:	2101      	movs	r1, #1
 8005166:	189b      	adds	r3, r3, r2
 8005168:	e7a6      	b.n	80050b8 <_svfiprintf_r+0xd4>
 800516a:	2301      	movs	r3, #1
 800516c:	425b      	negs	r3, r3
 800516e:	e7d0      	b.n	8005112 <_svfiprintf_r+0x12e>
 8005170:	2300      	movs	r3, #0
 8005172:	200a      	movs	r0, #10
 8005174:	001a      	movs	r2, r3
 8005176:	3501      	adds	r5, #1
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	7829      	ldrb	r1, [r5, #0]
 800517c:	1c6e      	adds	r6, r5, #1
 800517e:	3930      	subs	r1, #48	; 0x30
 8005180:	2909      	cmp	r1, #9
 8005182:	d903      	bls.n	800518c <_svfiprintf_r+0x1a8>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0c5      	beq.n	8005114 <_svfiprintf_r+0x130>
 8005188:	9209      	str	r2, [sp, #36]	; 0x24
 800518a:	e7c3      	b.n	8005114 <_svfiprintf_r+0x130>
 800518c:	4342      	muls	r2, r0
 800518e:	0035      	movs	r5, r6
 8005190:	2301      	movs	r3, #1
 8005192:	1852      	adds	r2, r2, r1
 8005194:	e7f1      	b.n	800517a <_svfiprintf_r+0x196>
 8005196:	aa07      	add	r2, sp, #28
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	0021      	movs	r1, r4
 800519c:	003a      	movs	r2, r7
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <_svfiprintf_r+0x1fc>)
 80051a0:	9803      	ldr	r0, [sp, #12]
 80051a2:	e000      	b.n	80051a6 <_svfiprintf_r+0x1c2>
 80051a4:	bf00      	nop
 80051a6:	9004      	str	r0, [sp, #16]
 80051a8:	9b04      	ldr	r3, [sp, #16]
 80051aa:	3301      	adds	r3, #1
 80051ac:	d1d3      	bne.n	8005156 <_svfiprintf_r+0x172>
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051b2:	065b      	lsls	r3, r3, #25
 80051b4:	d400      	bmi.n	80051b8 <_svfiprintf_r+0x1d4>
 80051b6:	e72c      	b.n	8005012 <_svfiprintf_r+0x2e>
 80051b8:	2001      	movs	r0, #1
 80051ba:	4240      	negs	r0, r0
 80051bc:	e729      	b.n	8005012 <_svfiprintf_r+0x2e>
 80051be:	aa07      	add	r2, sp, #28
 80051c0:	9200      	str	r2, [sp, #0]
 80051c2:	0021      	movs	r1, r4
 80051c4:	003a      	movs	r2, r7
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <_svfiprintf_r+0x1fc>)
 80051c8:	9803      	ldr	r0, [sp, #12]
 80051ca:	f000 f87b 	bl	80052c4 <_printf_i>
 80051ce:	e7ea      	b.n	80051a6 <_svfiprintf_r+0x1c2>
 80051d0:	080069f4 	.word	0x080069f4
 80051d4:	080069fa 	.word	0x080069fa
 80051d8:	080069fe 	.word	0x080069fe
 80051dc:	00000000 	.word	0x00000000
 80051e0:	08004f21 	.word	0x08004f21

080051e4 <_printf_common>:
 80051e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051e6:	0016      	movs	r6, r2
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	688a      	ldr	r2, [r1, #8]
 80051ec:	690b      	ldr	r3, [r1, #16]
 80051ee:	000c      	movs	r4, r1
 80051f0:	9000      	str	r0, [sp, #0]
 80051f2:	4293      	cmp	r3, r2
 80051f4:	da00      	bge.n	80051f8 <_printf_common+0x14>
 80051f6:	0013      	movs	r3, r2
 80051f8:	0022      	movs	r2, r4
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	3243      	adds	r2, #67	; 0x43
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	2a00      	cmp	r2, #0
 8005202:	d001      	beq.n	8005208 <_printf_common+0x24>
 8005204:	3301      	adds	r3, #1
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	069b      	lsls	r3, r3, #26
 800520c:	d502      	bpl.n	8005214 <_printf_common+0x30>
 800520e:	6833      	ldr	r3, [r6, #0]
 8005210:	3302      	adds	r3, #2
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	2306      	movs	r3, #6
 8005218:	0015      	movs	r5, r2
 800521a:	401d      	ands	r5, r3
 800521c:	421a      	tst	r2, r3
 800521e:	d027      	beq.n	8005270 <_printf_common+0x8c>
 8005220:	0023      	movs	r3, r4
 8005222:	3343      	adds	r3, #67	; 0x43
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	4193      	sbcs	r3, r2
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	0692      	lsls	r2, r2, #26
 800522e:	d430      	bmi.n	8005292 <_printf_common+0xae>
 8005230:	0022      	movs	r2, r4
 8005232:	9901      	ldr	r1, [sp, #4]
 8005234:	9800      	ldr	r0, [sp, #0]
 8005236:	9d08      	ldr	r5, [sp, #32]
 8005238:	3243      	adds	r2, #67	; 0x43
 800523a:	47a8      	blx	r5
 800523c:	3001      	adds	r0, #1
 800523e:	d025      	beq.n	800528c <_printf_common+0xa8>
 8005240:	2206      	movs	r2, #6
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	2500      	movs	r5, #0
 8005246:	4013      	ands	r3, r2
 8005248:	2b04      	cmp	r3, #4
 800524a:	d105      	bne.n	8005258 <_printf_common+0x74>
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	68e5      	ldr	r5, [r4, #12]
 8005250:	1aed      	subs	r5, r5, r3
 8005252:	43eb      	mvns	r3, r5
 8005254:	17db      	asrs	r3, r3, #31
 8005256:	401d      	ands	r5, r3
 8005258:	68a3      	ldr	r3, [r4, #8]
 800525a:	6922      	ldr	r2, [r4, #16]
 800525c:	4293      	cmp	r3, r2
 800525e:	dd01      	ble.n	8005264 <_printf_common+0x80>
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	18ed      	adds	r5, r5, r3
 8005264:	2600      	movs	r6, #0
 8005266:	42b5      	cmp	r5, r6
 8005268:	d120      	bne.n	80052ac <_printf_common+0xc8>
 800526a:	2000      	movs	r0, #0
 800526c:	e010      	b.n	8005290 <_printf_common+0xac>
 800526e:	3501      	adds	r5, #1
 8005270:	68e3      	ldr	r3, [r4, #12]
 8005272:	6832      	ldr	r2, [r6, #0]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	42ab      	cmp	r3, r5
 8005278:	ddd2      	ble.n	8005220 <_printf_common+0x3c>
 800527a:	0022      	movs	r2, r4
 800527c:	2301      	movs	r3, #1
 800527e:	9901      	ldr	r1, [sp, #4]
 8005280:	9800      	ldr	r0, [sp, #0]
 8005282:	9f08      	ldr	r7, [sp, #32]
 8005284:	3219      	adds	r2, #25
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	d1f0      	bne.n	800526e <_printf_common+0x8a>
 800528c:	2001      	movs	r0, #1
 800528e:	4240      	negs	r0, r0
 8005290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005292:	2030      	movs	r0, #48	; 0x30
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	3143      	adds	r1, #67	; 0x43
 8005298:	7008      	strb	r0, [r1, #0]
 800529a:	0021      	movs	r1, r4
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	3145      	adds	r1, #69	; 0x45
 80052a0:	7809      	ldrb	r1, [r1, #0]
 80052a2:	18a2      	adds	r2, r4, r2
 80052a4:	3243      	adds	r2, #67	; 0x43
 80052a6:	3302      	adds	r3, #2
 80052a8:	7011      	strb	r1, [r2, #0]
 80052aa:	e7c1      	b.n	8005230 <_printf_common+0x4c>
 80052ac:	0022      	movs	r2, r4
 80052ae:	2301      	movs	r3, #1
 80052b0:	9901      	ldr	r1, [sp, #4]
 80052b2:	9800      	ldr	r0, [sp, #0]
 80052b4:	9f08      	ldr	r7, [sp, #32]
 80052b6:	321a      	adds	r2, #26
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xa8>
 80052be:	3601      	adds	r6, #1
 80052c0:	e7d1      	b.n	8005266 <_printf_common+0x82>
	...

080052c4 <_printf_i>:
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	b08b      	sub	sp, #44	; 0x2c
 80052c8:	9206      	str	r2, [sp, #24]
 80052ca:	000a      	movs	r2, r1
 80052cc:	3243      	adds	r2, #67	; 0x43
 80052ce:	9307      	str	r3, [sp, #28]
 80052d0:	9005      	str	r0, [sp, #20]
 80052d2:	9204      	str	r2, [sp, #16]
 80052d4:	7e0a      	ldrb	r2, [r1, #24]
 80052d6:	000c      	movs	r4, r1
 80052d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052da:	2a78      	cmp	r2, #120	; 0x78
 80052dc:	d809      	bhi.n	80052f2 <_printf_i+0x2e>
 80052de:	2a62      	cmp	r2, #98	; 0x62
 80052e0:	d80b      	bhi.n	80052fa <_printf_i+0x36>
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d100      	bne.n	80052e8 <_printf_i+0x24>
 80052e6:	e0be      	b.n	8005466 <_printf_i+0x1a2>
 80052e8:	497c      	ldr	r1, [pc, #496]	; (80054dc <_printf_i+0x218>)
 80052ea:	9103      	str	r1, [sp, #12]
 80052ec:	2a58      	cmp	r2, #88	; 0x58
 80052ee:	d100      	bne.n	80052f2 <_printf_i+0x2e>
 80052f0:	e093      	b.n	800541a <_printf_i+0x156>
 80052f2:	0026      	movs	r6, r4
 80052f4:	3642      	adds	r6, #66	; 0x42
 80052f6:	7032      	strb	r2, [r6, #0]
 80052f8:	e022      	b.n	8005340 <_printf_i+0x7c>
 80052fa:	0010      	movs	r0, r2
 80052fc:	3863      	subs	r0, #99	; 0x63
 80052fe:	2815      	cmp	r0, #21
 8005300:	d8f7      	bhi.n	80052f2 <_printf_i+0x2e>
 8005302:	f7fa ff01 	bl	8000108 <__gnu_thumb1_case_shi>
 8005306:	0016      	.short	0x0016
 8005308:	fff6001f 	.word	0xfff6001f
 800530c:	fff6fff6 	.word	0xfff6fff6
 8005310:	001ffff6 	.word	0x001ffff6
 8005314:	fff6fff6 	.word	0xfff6fff6
 8005318:	fff6fff6 	.word	0xfff6fff6
 800531c:	003600a3 	.word	0x003600a3
 8005320:	fff60083 	.word	0xfff60083
 8005324:	00b4fff6 	.word	0x00b4fff6
 8005328:	0036fff6 	.word	0x0036fff6
 800532c:	fff6fff6 	.word	0xfff6fff6
 8005330:	0087      	.short	0x0087
 8005332:	0026      	movs	r6, r4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	3642      	adds	r6, #66	; 0x42
 8005338:	1d11      	adds	r1, r2, #4
 800533a:	6019      	str	r1, [r3, #0]
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	7033      	strb	r3, [r6, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	e0a2      	b.n	800548a <_printf_i+0x1c6>
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	6809      	ldr	r1, [r1, #0]
 8005348:	1d02      	adds	r2, r0, #4
 800534a:	060d      	lsls	r5, r1, #24
 800534c:	d50b      	bpl.n	8005366 <_printf_i+0xa2>
 800534e:	6805      	ldr	r5, [r0, #0]
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	2d00      	cmp	r5, #0
 8005354:	da03      	bge.n	800535e <_printf_i+0x9a>
 8005356:	232d      	movs	r3, #45	; 0x2d
 8005358:	9a04      	ldr	r2, [sp, #16]
 800535a:	426d      	negs	r5, r5
 800535c:	7013      	strb	r3, [r2, #0]
 800535e:	4b5f      	ldr	r3, [pc, #380]	; (80054dc <_printf_i+0x218>)
 8005360:	270a      	movs	r7, #10
 8005362:	9303      	str	r3, [sp, #12]
 8005364:	e01b      	b.n	800539e <_printf_i+0xda>
 8005366:	6805      	ldr	r5, [r0, #0]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	0649      	lsls	r1, r1, #25
 800536c:	d5f1      	bpl.n	8005352 <_printf_i+0x8e>
 800536e:	b22d      	sxth	r5, r5
 8005370:	e7ef      	b.n	8005352 <_printf_i+0x8e>
 8005372:	680d      	ldr	r5, [r1, #0]
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	1d08      	adds	r0, r1, #4
 8005378:	6018      	str	r0, [r3, #0]
 800537a:	062e      	lsls	r6, r5, #24
 800537c:	d501      	bpl.n	8005382 <_printf_i+0xbe>
 800537e:	680d      	ldr	r5, [r1, #0]
 8005380:	e003      	b.n	800538a <_printf_i+0xc6>
 8005382:	066d      	lsls	r5, r5, #25
 8005384:	d5fb      	bpl.n	800537e <_printf_i+0xba>
 8005386:	680d      	ldr	r5, [r1, #0]
 8005388:	b2ad      	uxth	r5, r5
 800538a:	4b54      	ldr	r3, [pc, #336]	; (80054dc <_printf_i+0x218>)
 800538c:	2708      	movs	r7, #8
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	2a6f      	cmp	r2, #111	; 0x6f
 8005392:	d000      	beq.n	8005396 <_printf_i+0xd2>
 8005394:	3702      	adds	r7, #2
 8005396:	0023      	movs	r3, r4
 8005398:	2200      	movs	r2, #0
 800539a:	3343      	adds	r3, #67	; 0x43
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db03      	blt.n	80053ae <_printf_i+0xea>
 80053a6:	2104      	movs	r1, #4
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	438a      	bics	r2, r1
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	d102      	bne.n	80053b8 <_printf_i+0xf4>
 80053b2:	9e04      	ldr	r6, [sp, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <_printf_i+0x10e>
 80053b8:	9e04      	ldr	r6, [sp, #16]
 80053ba:	0028      	movs	r0, r5
 80053bc:	0039      	movs	r1, r7
 80053be:	f7fa ff33 	bl	8000228 <__aeabi_uidivmod>
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	3e01      	subs	r6, #1
 80053c6:	5c5b      	ldrb	r3, [r3, r1]
 80053c8:	7033      	strb	r3, [r6, #0]
 80053ca:	002b      	movs	r3, r5
 80053cc:	0005      	movs	r5, r0
 80053ce:	429f      	cmp	r7, r3
 80053d0:	d9f3      	bls.n	80053ba <_printf_i+0xf6>
 80053d2:	2f08      	cmp	r7, #8
 80053d4:	d109      	bne.n	80053ea <_printf_i+0x126>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	07db      	lsls	r3, r3, #31
 80053da:	d506      	bpl.n	80053ea <_printf_i+0x126>
 80053dc:	6862      	ldr	r2, [r4, #4]
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	dc02      	bgt.n	80053ea <_printf_i+0x126>
 80053e4:	2330      	movs	r3, #48	; 0x30
 80053e6:	3e01      	subs	r6, #1
 80053e8:	7033      	strb	r3, [r6, #0]
 80053ea:	9b04      	ldr	r3, [sp, #16]
 80053ec:	1b9b      	subs	r3, r3, r6
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	9b07      	ldr	r3, [sp, #28]
 80053f2:	0021      	movs	r1, r4
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	9805      	ldr	r0, [sp, #20]
 80053f8:	9b06      	ldr	r3, [sp, #24]
 80053fa:	aa09      	add	r2, sp, #36	; 0x24
 80053fc:	f7ff fef2 	bl	80051e4 <_printf_common>
 8005400:	3001      	adds	r0, #1
 8005402:	d147      	bne.n	8005494 <_printf_i+0x1d0>
 8005404:	2001      	movs	r0, #1
 8005406:	4240      	negs	r0, r0
 8005408:	b00b      	add	sp, #44	; 0x2c
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540c:	2220      	movs	r2, #32
 800540e:	6809      	ldr	r1, [r1, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	2278      	movs	r2, #120	; 0x78
 8005416:	4932      	ldr	r1, [pc, #200]	; (80054e0 <_printf_i+0x21c>)
 8005418:	9103      	str	r1, [sp, #12]
 800541a:	0021      	movs	r1, r4
 800541c:	3145      	adds	r1, #69	; 0x45
 800541e:	700a      	strb	r2, [r1, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	c920      	ldmia	r1!, {r5}
 8005426:	0610      	lsls	r0, r2, #24
 8005428:	d402      	bmi.n	8005430 <_printf_i+0x16c>
 800542a:	0650      	lsls	r0, r2, #25
 800542c:	d500      	bpl.n	8005430 <_printf_i+0x16c>
 800542e:	b2ad      	uxth	r5, r5
 8005430:	6019      	str	r1, [r3, #0]
 8005432:	07d3      	lsls	r3, r2, #31
 8005434:	d502      	bpl.n	800543c <_printf_i+0x178>
 8005436:	2320      	movs	r3, #32
 8005438:	4313      	orrs	r3, r2
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	2710      	movs	r7, #16
 800543e:	2d00      	cmp	r5, #0
 8005440:	d1a9      	bne.n	8005396 <_printf_i+0xd2>
 8005442:	2220      	movs	r2, #32
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	4393      	bics	r3, r2
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	e7a4      	b.n	8005396 <_printf_i+0xd2>
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	680d      	ldr	r5, [r1, #0]
 8005450:	1d10      	adds	r0, r2, #4
 8005452:	6949      	ldr	r1, [r1, #20]
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	062e      	lsls	r6, r5, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0x19c>
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0x1a2>
 8005460:	066d      	lsls	r5, r5, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0x198>
 8005464:	8019      	strh	r1, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	9e04      	ldr	r6, [sp, #16]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	e7c0      	b.n	80053f0 <_printf_i+0x12c>
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	1d11      	adds	r1, r2, #4
 8005472:	6019      	str	r1, [r3, #0]
 8005474:	6816      	ldr	r6, [r2, #0]
 8005476:	2100      	movs	r1, #0
 8005478:	0030      	movs	r0, r6
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	f000 f858 	bl	8005530 <memchr>
 8005480:	2800      	cmp	r0, #0
 8005482:	d001      	beq.n	8005488 <_printf_i+0x1c4>
 8005484:	1b80      	subs	r0, r0, r6
 8005486:	6060      	str	r0, [r4, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	9a04      	ldr	r2, [sp, #16]
 8005490:	7013      	strb	r3, [r2, #0]
 8005492:	e7ad      	b.n	80053f0 <_printf_i+0x12c>
 8005494:	0032      	movs	r2, r6
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	9906      	ldr	r1, [sp, #24]
 800549a:	9805      	ldr	r0, [sp, #20]
 800549c:	9d07      	ldr	r5, [sp, #28]
 800549e:	47a8      	blx	r5
 80054a0:	3001      	adds	r0, #1
 80054a2:	d0af      	beq.n	8005404 <_printf_i+0x140>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	079b      	lsls	r3, r3, #30
 80054a8:	d415      	bmi.n	80054d6 <_printf_i+0x212>
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	68e0      	ldr	r0, [r4, #12]
 80054ae:	4298      	cmp	r0, r3
 80054b0:	daaa      	bge.n	8005408 <_printf_i+0x144>
 80054b2:	0018      	movs	r0, r3
 80054b4:	e7a8      	b.n	8005408 <_printf_i+0x144>
 80054b6:	0022      	movs	r2, r4
 80054b8:	2301      	movs	r3, #1
 80054ba:	9906      	ldr	r1, [sp, #24]
 80054bc:	9805      	ldr	r0, [sp, #20]
 80054be:	9e07      	ldr	r6, [sp, #28]
 80054c0:	3219      	adds	r2, #25
 80054c2:	47b0      	blx	r6
 80054c4:	3001      	adds	r0, #1
 80054c6:	d09d      	beq.n	8005404 <_printf_i+0x140>
 80054c8:	3501      	adds	r5, #1
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dcf0      	bgt.n	80054b6 <_printf_i+0x1f2>
 80054d4:	e7e9      	b.n	80054aa <_printf_i+0x1e6>
 80054d6:	2500      	movs	r5, #0
 80054d8:	e7f7      	b.n	80054ca <_printf_i+0x206>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	08006a05 	.word	0x08006a05
 80054e0:	08006a16 	.word	0x08006a16

080054e4 <memmove>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4288      	cmp	r0, r1
 80054e8:	d902      	bls.n	80054f0 <memmove+0xc>
 80054ea:	188b      	adds	r3, r1, r2
 80054ec:	4298      	cmp	r0, r3
 80054ee:	d303      	bcc.n	80054f8 <memmove+0x14>
 80054f0:	2300      	movs	r3, #0
 80054f2:	e007      	b.n	8005504 <memmove+0x20>
 80054f4:	5c8b      	ldrb	r3, [r1, r2]
 80054f6:	5483      	strb	r3, [r0, r2]
 80054f8:	3a01      	subs	r2, #1
 80054fa:	d2fb      	bcs.n	80054f4 <memmove+0x10>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	5ccc      	ldrb	r4, [r1, r3]
 8005500:	54c4      	strb	r4, [r0, r3]
 8005502:	3301      	adds	r3, #1
 8005504:	429a      	cmp	r2, r3
 8005506:	d1fa      	bne.n	80054fe <memmove+0x1a>
 8005508:	e7f8      	b.n	80054fc <memmove+0x18>
	...

0800550c <_sbrk_r>:
 800550c:	2300      	movs	r3, #0
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4d06      	ldr	r5, [pc, #24]	; (800552c <_sbrk_r+0x20>)
 8005512:	0004      	movs	r4, r0
 8005514:	0008      	movs	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fc fbe8 	bl	8001cec <_sbrk>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d103      	bne.n	8005528 <_sbrk_r+0x1c>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d000      	beq.n	8005528 <_sbrk_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	20000348 	.word	0x20000348

08005530 <memchr>:
 8005530:	b2c9      	uxtb	r1, r1
 8005532:	1882      	adds	r2, r0, r2
 8005534:	4290      	cmp	r0, r2
 8005536:	d101      	bne.n	800553c <memchr+0xc>
 8005538:	2000      	movs	r0, #0
 800553a:	4770      	bx	lr
 800553c:	7803      	ldrb	r3, [r0, #0]
 800553e:	428b      	cmp	r3, r1
 8005540:	d0fb      	beq.n	800553a <memchr+0xa>
 8005542:	3001      	adds	r0, #1
 8005544:	e7f6      	b.n	8005534 <memchr+0x4>

08005546 <memcpy>:
 8005546:	2300      	movs	r3, #0
 8005548:	b510      	push	{r4, lr}
 800554a:	429a      	cmp	r2, r3
 800554c:	d100      	bne.n	8005550 <memcpy+0xa>
 800554e:	bd10      	pop	{r4, pc}
 8005550:	5ccc      	ldrb	r4, [r1, r3]
 8005552:	54c4      	strb	r4, [r0, r3]
 8005554:	3301      	adds	r3, #1
 8005556:	e7f8      	b.n	800554a <memcpy+0x4>

08005558 <_realloc_r>:
 8005558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555a:	0007      	movs	r7, r0
 800555c:	000e      	movs	r6, r1
 800555e:	0014      	movs	r4, r2
 8005560:	2900      	cmp	r1, #0
 8005562:	d105      	bne.n	8005570 <_realloc_r+0x18>
 8005564:	0011      	movs	r1, r2
 8005566:	f7ff fc49 	bl	8004dfc <_malloc_r>
 800556a:	0005      	movs	r5, r0
 800556c:	0028      	movs	r0, r5
 800556e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005570:	2a00      	cmp	r2, #0
 8005572:	d103      	bne.n	800557c <_realloc_r+0x24>
 8005574:	f7ff fbd6 	bl	8004d24 <_free_r>
 8005578:	0025      	movs	r5, r4
 800557a:	e7f7      	b.n	800556c <_realloc_r+0x14>
 800557c:	f000 f81b 	bl	80055b6 <_malloc_usable_size_r>
 8005580:	9001      	str	r0, [sp, #4]
 8005582:	4284      	cmp	r4, r0
 8005584:	d803      	bhi.n	800558e <_realloc_r+0x36>
 8005586:	0035      	movs	r5, r6
 8005588:	0843      	lsrs	r3, r0, #1
 800558a:	42a3      	cmp	r3, r4
 800558c:	d3ee      	bcc.n	800556c <_realloc_r+0x14>
 800558e:	0021      	movs	r1, r4
 8005590:	0038      	movs	r0, r7
 8005592:	f7ff fc33 	bl	8004dfc <_malloc_r>
 8005596:	1e05      	subs	r5, r0, #0
 8005598:	d0e8      	beq.n	800556c <_realloc_r+0x14>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	0022      	movs	r2, r4
 800559e:	429c      	cmp	r4, r3
 80055a0:	d900      	bls.n	80055a4 <_realloc_r+0x4c>
 80055a2:	001a      	movs	r2, r3
 80055a4:	0031      	movs	r1, r6
 80055a6:	0028      	movs	r0, r5
 80055a8:	f7ff ffcd 	bl	8005546 <memcpy>
 80055ac:	0031      	movs	r1, r6
 80055ae:	0038      	movs	r0, r7
 80055b0:	f7ff fbb8 	bl	8004d24 <_free_r>
 80055b4:	e7da      	b.n	800556c <_realloc_r+0x14>

080055b6 <_malloc_usable_size_r>:
 80055b6:	1f0b      	subs	r3, r1, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1f18      	subs	r0, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da01      	bge.n	80055c4 <_malloc_usable_size_r+0xe>
 80055c0:	580b      	ldr	r3, [r1, r0]
 80055c2:	18c0      	adds	r0, r0, r3
 80055c4:	4770      	bx	lr
	...

080055c8 <_init>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr

080055d4 <_fini>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr
